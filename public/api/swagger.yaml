# Software AG
schemes:
  - http
  - https
  - ws
  - wss
swagger: "2.0"
info:
  description: Adabas RESTful server
  title: Adabas RESTful server
  contact:
    name: Software AG Support
    url: "https://empower.softwareag.com/"
    email: empower@softwareag.com
  license:
    name: Software AG
    url: "http://documentation.softwareag.com/legal/general_license.txt"
  version: 7.1.0.0.28082021
host: "localhost:8130"
basePath: /
paths:
  "/login":
    get:
      security:
        - BasicAuth: []
      description: Login receiving JWT
      produces:
        - application/json
      tags:
        - Environment
      operationId: getLoginSession
      responses:
        "200":
          description: "Successful login"
          schema:
            $ref: "#/definitions/AuthorizationToken"
        default:
          description: Error authorization
          schema:
            $ref: "#/definitions/Error"
    put:
      security:
        - BasicAuth: []
      description: Login receiving JWT
      produces:
        - application/json
      tags:
        - Environment
      operationId: loginSession
      responses:
        "200":
          description: "Successful login"
          schema:
            $ref: "#/definitions/AuthorizationToken"
        default:
          description: Error authorization
          schema:
            $ref: "#/definitions/Error"
    post:
      security:
        - BasicAuth: []
      description: Login receiving JWT
      produces:
        - application/json
      tags:
        - Environment
      operationId: pushLoginSession
      responses:
        "200":
          description: "Successful login"
          schema:
            $ref: "#/definitions/AuthorizationToken"
        default:
          description: Error authorization
          schema:
            $ref: "#/definitions/Error"
  "/logout":
    get:
      security:
        - BasicAuth: []
        - hasRole: [user]
      description: Remove the session
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      tags:
        - Environment
      operationId: removeSession
      responses:
        "200":
          description: "Successful response, session is invalidated"
        "400":
          description: Environment evaluation error
          schema:
            $ref: "#/definitions/Error"
  "/rest/logoff":
    get:
      security:
        - BasicAuth: []
        - hasRole: [user]
      description: Remove the session
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      tags:
        - Environment
      operationId: removeSessionCompat
      responses:
        "200":
          description: "Successful response, session is invalidated"
        "400":
          description: Environment evaluation error
          schema:
            $ref: "#/definitions/Error"
  "/shutdown/{hash}":
    put:
      security:
        - BasicAuth: []
        - hasRole: [admin]
      description: Init shutdown procedure
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      tags:
        - Environment
      operationId: shutdownServer
      parameters:
        - type: string
          description: Shutdown validation hash
          name: hash
          in: path
          required: true
      responses:
        "200":
          description: "Successful response, if shutdown procedure valid"
          schema:
            $ref: "#/definitions/StatusResponse"
        "401":
          description: Authorization error
        "403":
          description: Role access denied
        "404":
          description: Error shutdown hash invalid
          schema:
            $ref: "#/definitions/Error"
  /env:
    get:
      security: []
      description: Retrieves the list of environments
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      tags:
        - Environment
      operationId: getEnvironments
      responses:
        "200":
          description: "Successful response, with a list of Adabas environment and versions"
          schema:
            $ref: "#/definitions/Environments"
        "400":
          description: Environment evaluation error
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: Authorization error
        "403":
          description: Role access denied
  /adabas/rest/env:
    get:
      security: []
      description: Retrieves the list of environments
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      tags:
        - Environment
      operationId: getVersions
      responses:
        "200":
          description: "Successful response, with a list of Adabas environment and versions"
          schema:
            $ref: "#/definitions/Environments"
        "400":
          description: Environment evaluation error
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: Authorization error
        "403":
          description: Role access denied
  /version:
    get:
      security: []
      description: Retrieves the current version
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      tags:
        - Environment
      operationId: getVersion
      responses:
        "200":
          description: "Successful response, with a list of internal versions"
          schema:
            $ref: "#/definitions/Versions"
        "400":
          description: Error application not running correctly
          schema:
            $ref: "#/definitions/Error"
  /adabas/version:
    get:
      security: []
      description: Retrieves the current version
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      tags:
        - Environment
      operationId: getAdabasVersion
      responses:
        "200":
          description: "Successful response, with a list of internal versions"
          schema:
            $ref: "#/definitions/Versions"
        "400":
          description: Error application not running correctly
          schema:
            $ref: "#/definitions/Error"
  /adabas/config:
    get:
      security:
        - BasicAuth: []
        - hasRole: [admin]
      description: Get adabas configuration
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      tags:
        - Environment
      operationId: getAdabasConfig
      responses:
        "200":
          description: OK
          schema:
            $ref: "#/definitions/Config"
        "400":
          description: Database error evaluating list
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: Authorization error
        "403":
          description: Role access denied
    put:
      security:
        - BasicAuth: []
        - hasRole: [admin]
      description: Store configuration
      consumes:
        - application/json
        - application/xml
        - text/plain
      produces:
        - application/json
        - application/xml
      tags:
        - Environment
      operationId: setAdabasConfig
      parameters:
        - description: Configuration content
          name: data
          in: body
          required: true
          schema:
            $ref: "#/definitions/Config"
      responses:
        "200":
          description: OK
        "400":
          description: Database error evaluating list
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: Authorization error
        "403":
          description: Role access denied
    post:
      security:
        - BasicAuth: []
        - hasRole: [admin]
      description: Store configuration
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      tags:
        - Environment
      operationId: storeAdabasConfig
      responses:
        "200":
          description: OK
        "400":
          description: Database error evaluating list
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: Authorization error
        "403":
          description: Role access denied
  /adabas/config/server:
    get:
      security:
        - BasicAuth: []
        - hasRole: [admin]
      description: Defines the current Adabas Map repositories
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      tags:
        - Environment
      operationId: getServerConfig
      responses:
        "200":
          description: OK
          schema:
            $ref: "#/definitions/Server"
        "400":
          description: Database error evaluating list
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: Authorization error
        "403":
          description: Role access denied
  /adabas/config/classic:
    get:
      security:
        - BasicAuth: []
        - hasRole: [admin]
      description: Defines the Adabas direct access
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      tags:
        - Environment
      operationId: getClassicConfig
      responses:
        "200":
          description: OK
          schema:
            $ref: "#/definitions/ClassicAccess"
        "400":
          description: Database error evaluating list
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: Authorization error
        "403":
          description: Role access denied
    post:
      security:
        - BasicAuth: []
        - hasRole: [admin]
      description: Add an entry for the Adabas direct access
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      tags:
        - Environment
      operationId: pushClassicConfig
      parameters:
        - type: string
          description: Database URL
          name: url
          in: query
        - type: boolean
          description: Global classic database access parameter
          name: global
          in: query
      responses:
        "200":
          description: OK
        "400":
          description: Database error evaluating list
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: Authorization error
        "403":
          description: Role access denied
    delete:
      security:
        - BasicAuth: []
        - hasRole: [admin]
      description: delete entry in configuration
      consumes:
        - application/json
      produces:
        - application/json
        - application/xml
      tags:
        - Environment
      parameters:
        - type: string
          description: Database URL
          name: url
          in: query
          required: true
      operationId: deleteClassicConfig
      responses:
        "200":
          description: OK
        "400":
          description: Database error evaluating list
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: Authorization error
        "403":
          description: Role access denied

  /adabas/config/mapping:
    get:
      security:
        - BasicAuth: []
        - hasRole: [admin]
      description: Defines the current Adabas Map repositories
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      tags:
        - Environment
      operationId: getMappingConfig
      responses:
        "200":
          description: OK
          schema:
            $ref: "#/definitions/MappingConfig"
        "400":
          description: Database error evaluating list
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: Authorization error
        "403":
          description: Role access denied

    post:
      security:
        - BasicAuth: []
        - hasRole: [admin]
      description: add configuration in Adabas Map repositories
      consumes:
        - application/json
      produces:
        - application/json
        - application/xml
      tags:
        - Environment
      operationId: addMappingConfig
      parameters:
        - type: string
          description: Database URL
          name: url
          in: query
          required: true
        - type: integer
          description: Database file number
          name: file
          in: query
          required: true
      responses:
        "200":
          description: OK
        "400":
          description: Database error evaluating list
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: Authorization error
        "403":
          description: Role access denied

    delete:
      security:
        - BasicAuth: []
        - hasRole: [admin]
      description: delete entry in configuration
      tags:
        - Environment
      operationId: deleteMappingConfig
      parameters:
        - type: string
          description: Database URL
          name: url
          in: query
          required: true
        - type: integer
          description: Database file number
          name: file
          in: query
          required: true
      responses:
        "200":
          description: OK
        "400":
          description: Database error evaluating list
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: Authorization error
        "403":
          description: Role access denied
  /adabas/config/module:
    get:
      security:
        - BasicAuth: []
        - hasRole: [admin]
      description: Defines the current Adabas Module section
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      tags:
        - Environment
      operationId: getModuleConfig
      responses:
        "200":
          description: OK
          schema:
            $ref: "#/definitions/Module"
        "400":
          description: Database error evaluating list
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: Authorization error
        "403":
          description: Role access denied
    put:
      security:
        - BasicAuth: []
        - hasRole: [admin]
      description: Set the ADADATADIR
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      tags:
        - Environment
      operationId: setAdadataDir
      parameters:
        - type: string
          description: Adabas Database DATADIR location
          name: adadatadir
          in: query
          required: true
      responses:
        "200":
          description: OK
        "400":
          description: Database configuration setting fail
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: Authorization error
        "403":
          description: Role access denied
  /adabas/config/jobs:
    get:
      security:
        - BasicAuth: []
        - hasRole: [admin]
      description: Read  Adabas job configuration section
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      tags:
        - Environment
      operationId: getJobsConfig
      responses:
        "200":
          description: OK
          schema:
            $ref: "#/definitions/JobStore"
        "400":
          description: Database error evaluating list
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: Authorization error
        "403":
          description: Role access denied
    put:
      security:
        - BasicAuth: []
        - hasRole: [admin]
      description: Set the ADADATADIR
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      tags:
        - Environment
      parameters:
        - name: jobConfig
          in: body
          schema:
            $ref: "#/definitions/JobStore"
      operationId: setJobsConfig
      responses:
        "200":
          description: OK
        "400":
          description: Database configuration setting fail
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: Authorization error
        "403":
          description: Role access denied
  /adabas/license:
    post:
      security:
        - BasicAuth: []
        - hasRole: [admin]
      description: Upload license
      consumes:
        - application/octet-stream
        - multipart/form-data
      produces:
        - application/json
      tags:
        - Environment
      parameters:
        - type: string
          description: Upload SAG environment destination
          name: sag
          in: query
          required: true
        - type: string
          description: Upload name of license file
          name: name
          in: query
          required: true
        - type: file
          description: Upload license content of field
          name: uploadLicense
          in: formData
          required: true
      operationId: uploadLicense
      responses:
        "200":
          description: OK
        "400":
          description: Database error evaluating list
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: Authorization error
        "403":
          description: Role access denied
        "404":
          description: Location not available/unknown
          schema:
            $ref: "#/definitions/Error"
  /adabas/config/module/installation:
    get:
      security:
        - BasicAuth: []
        - hasRole: [admin]
      description: Defines the current Adabas Module section
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      tags:
        - Environment
      operationId: getInstallationConfig
      responses:
        "200":
          description: OK
          schema:
            $ref: "#/definitions/Installation"
        "400":
          description: Database error evaluating list
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: Authorization error
        "403":
          description: Role access denied
    post:
      security:
        - BasicAuth: []
        - hasRole: [admin]
      description: Add installation location
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      tags:
        - Environment
      operationId: addInstallationConfig
      parameters:
        - type: string
          description: Installation location added to
          name: installation
          in: query
          required: true
      responses:
        "200":
          description: "Successful response, with added the installation."
        "400":
          description: Environment evaluation error
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: Authorization error
        "403":
          description: Role access denied
        "404":
          description: Location not available/unknown
          schema:
            $ref: "#/definitions/Error"
    delete:
      security:
        - BasicAuth: []
        - hasRole: [admin]
      description: Delete the installation location
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      tags:
        - Environment
      operationId: deleteInstallationConfig
      parameters:
        - type: string
          description: Remove the installation location
          name: installation
          in: query
          required: true
      responses:
        "200":
          description: "Successful response, with download license file."
          schema:
            $ref: "#/definitions/StatusResponse"
        "400":
          description: Environment evaluation error
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: Authorization error
        "403":
          description: Role access denied
        "404":
          description: Location not available/unknown
          schema:
            $ref: "#/definitions/Error"
  /adabas/config/module/directories:
    get:
      security:
        - BasicAuth: []
        - hasRole: [admin]
      description: Read upload/download directories
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      tags:
        - Environment
      operationId: getDirectoriesConfig
      responses:
        "200":
          description: OK
          schema:
            $ref: "#/definitions/Directories"
        "400":
          description: Error evaluating list
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: Authorization error
        "403":
          description: Role access denied
    post:
      security:
        - BasicAuth: []
        - hasRole: [admin]
      description: Add directory location
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      tags:
        - Environment
      operationId: addDirectoryConfig
      parameters:
        - type: string
          description: Directory location added to
          name: location
          in: query
          required: true
        - type: string
          description: Name of upload/download location
          name: name
          in: query
          required: true
      responses:
        "200":
          description: "Successful response, with added the directory."
        "400":
          description: Environment evaluation error
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: Authorization error
        "403":
          description: Role access denied
        "404":
          description: Location not available/unknown
          schema:
            $ref: "#/definitions/Error"
    delete:
      security:
        - BasicAuth: []
        - hasRole: [admin]
      description: Delete the directory location
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      tags:
        - Environment
      operationId: deleteDirectoryConfig
      parameters:
        - type: string
          description: Remove the directory location
          name: name
          in: query
          required: true
      responses:
        "200":
          description: "Successful response, deleting the directory."
          schema:
            $ref: "#/definitions/StatusResponse"
        "400":
          description: Environment evaluation error
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: Authorization error
        "403":
          description: Role access denied
        "404":
          description: Location not available/unknown
          schema:
            $ref: "#/definitions/Error"
  /adabas/rest/log:
    get:
      security:
        - BasicAuth: []
        - hasRole: [admin]
      description: Retrieve Rest server output
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      tags:
        - Environment
      operationId: getRestServerLog
      responses:
        "200":
          description: "Successful response, with Adabas Rest server Log"
          schema:
            $ref: "#/definitions/NucleusLog"
        "400":
          description: Server log not available/unknown
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: Authorization error
        "403":
          description: Role access denied
  /adabas/cluster:
    get:
      security:
        - BasicAuth: []
        - hasRole: [admin]
      description: Retrieve the current status of Adabas cluster
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      tags:
        - OnlineOffline
      operationId: getCluster
      responses:
        "200":
          description: "Successful response, with status of Adabas cluster."
          schema:
            $ref: "#/definitions/Cluster"
        "400":
          description: Database error evaluating cluster
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: Authorization error
        "403":
          description: Role access denied
  /adabas/database:
    get:
      security:
        - BasicAuth: []
        - hasRole: [admin]
      description: Retrieves a list of databases known by Adabas Interface.
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      tags:
        - OnlineOffline
      operationId: getDatabases
      responses:
        "200":
          description: "Successful response, with list of known databases."
          schema:
            $ref: "#/definitions/Databases"
        "400":
          description: Database error evaluating list
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: Authorization error
        "403":
          description: Role access denied
    post:
      security:
        - BasicAuth: []
        - hasRole: [admin]
      description: Create a new Adabas database
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      tags:
        - Offline
      operationId: postAdabasDatabase
      parameters:
        - name: database
          in: body
          schema:
            $ref: "#/definitions/Database"
      responses:
        "200":
          description: "Successful response, with new Adabas databases created schema:"
          schema:
            $ref: "#/definitions/StatusResponse"
        "400":
          description: Error creating Adabas database
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: Authorization error
        "403":
          description: Role access denied
  "/adabas/database/{dbid_operation}":
    get:
      security:
        - BasicAuth: []
        - hasRole: [admin]
      description: Retrieve the current status of database with the given dbid
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      tags:
        - OnlineOffline
      operationId: databaseOperation
      parameters:
        - type: string
          description: >-
            Database ID optional with operation append with : like 123:shutdown
            Possible operations are - cancel - shutdown - abort - start
          name: dbid_operation
          in: path
          required: true
      responses:
        "200":
          description: "Successful response, with database status"
          schema:
            $ref: "#/definitions/DatabaseStatus"
        "202":
          description: "Successful response, with database status"
          schema:
            $ref: "#/definitions/StatusResponse"
        "400":
          description: Database evaluation error
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: Authorization error
        "403":
          description: Role access denied
    put:
      security:
        - BasicAuth: []
        - hasRole: [admin]
      description: Change resource of the database
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      tags:
        - OnlineOffline
      operationId: putDatabaseResource
      parameters:
        - type: string
          description: Database ID
          name: dbid_operation
          in: path
          required: true
        - type: string
          description: Database name
          name: name
          in: query
          required: false
        - type: boolean
          description: Enable or disable eventing
          name: eventing
          in: query
          required: false
        - type: integer
          description: Set Write Limit
          name: writelimit
          in: query
          required: false
        - type: boolean
          description: Lock database
          name: lock
          in: query
          required: false
        - type: boolean
          description: External database backup (true=prepare false=continue)
          name: externalbackup
          in: query
          required: false
      responses:
        "200":
          description: "Successful response, with database status"
          schema:
            $ref: "#/definitions/DatabaseStatus"
        "202":
          description: "Successful response, with database message"
          schema:
            $ref: "#/definitions/StatusResponse"
        "400":
          description: Database evaluation error
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: Authorization error
        "403":
          description: Role access denied
    post:
      security:
        - BasicAuth: []
        - hasRole: [admin]
      description: Initiate operations on the given dbid
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      tags:
        - OnlineOffline
      operationId: databasePostOperations
      parameters:
        - type: string
          description: >-
            Database ID optional with operation append with : like 123:shutdown
            Possible operations are - cancel - shutdown - abort - start -
            feofclog - feofplog - feofelog
          name: dbid_operation
          in: path
          required: true
        - type: boolean
          description: Only used together with PLOG FEOF
          name: etsync
          in: query
      responses:
        "200":
          description: "Successful response, with database status"
          schema:
            $ref: "#/definitions/DatabaseStatus"
        "202":
          description: "Successful response, with database status"
          schema:
            $ref: "#/definitions/StatusResponse"
        "400":
          description: Database evaluation error
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: Authorization error
        "403":
          description: Role access denied
    delete:
      security:
        - BasicAuth: []
        - hasRole: [admin]
      description: Delete the Adabas database
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      tags:
        - Offline
      operationId: deleteAdabasDatabase
      parameters:
        - type: integer
          description: Database ID
          name: dbid_operation
          in: path
          required: true
      responses:
        "200":
          description: "Successful response, a Adabas database is deleted"
          schema:
            $ref: "#/definitions/StatusResponse"
        "400":
          description: Error deleting the database
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: Authorization error
        "403":
          description: Role access denied
  "/adabas/database/{dbid}/actstats":
    get:
      security:
        - BasicAuth: []
        - hasRole: [admin]
      description: Retrieve Adabas activity statistics
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      tags:
        - Online
      operationId: getDatabaseActStats
      parameters:
        - $ref: "#/parameters/targetParam"
      responses:
        "200":
          description: "Successful response, with Adabas Activity statistics"
          schema:
            $ref: "#/definitions/ActivityStats"
        "400":
          description: Database not available/unknown
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: Authorization error
        "403":
          description: Role access denied
  "/adabas/database/{dbid}/bpstats":
    get:
      security:
        - BasicAuth: []
        - hasRole: [admin]
      description: Retrieve Adabas buffer pool statistics
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      tags:
        - Online
      operationId: getDatabaseBPStats
      parameters:
        - $ref: "#/parameters/targetParam"
      responses:
        "200":
          description: "Successful response, with Adabas Buffer Pool statistics"
          schema:
            $ref: "#/definitions/BufferPoolStats"
        "400":
          description: Database not available/unknown
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: Authorization error
        "403":
          description: Role access denied
  "/adabas/database/{dbid}/bfstats":
    get:
      security:
        - BasicAuth: []
        - hasRole: [admin]
      description: Retrieve Adabas buffer flush statistics
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      tags:
        - Online
      operationId: getDatabaseBfStats
      parameters:
        - $ref: "#/parameters/targetParam"
      responses:
        "200":
          description: "Successful response, with Adabas Buffer Flush statistics"
          schema:
            $ref: "#/definitions/BufferFlushStats"
        "400":
          description: Database not available/unknown
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: Authorization error
        "403":
          description: Role access denied
  "/adabas/database/{dbid}/monitor":
    get:
      security:
        - BasicAuth: []
        - hasRole: [admin]
      description: Retrieve Adabas monitor statistics
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      tags:
        - Online
      operationId: getDatabaseMonitor
      parameters:
        - $ref: "#/parameters/targetParam"
      responses:
        "200":
          description: "Successful response, with Adabas monitor statistics"
          schema:
            $ref: "#/definitions/AdaMonStats"
        "202":
          description: "Successful response, with Adabas monitor statistics list"
          schema:
            $ref: "#/definitions/AdaMonStatsList"
        "400":
          description: Database not available/unknown
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: Authorization error
        "403":
          description: Role access denied
  "/adabas/database/{dbid}/checkpoints":
    get:
      security:
        - BasicAuth: []
        - hasRole: [admin]
      description: >-
        Retrieve the Adabas Checkpoint list out of the database with the given
        dbid
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      tags:
        - Online
      operationId: getDatabaseCheckpoints
      parameters:
        - $ref: "#/parameters/dbidParam"
        - type: string
          description: Timestamp of first checkpoint entry
          name: start_time
          in: query
        - type: string
          description: Timestamp of last checkpoint entry
          name: end_time
          in: query
      responses:
        "200":
          description: "Successful response, with database Checkpoints"
          schema:
            $ref: "#/definitions/DatabaseCheckpoints"
        "400":
          description: Database not available
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: Authorization error
        "403":
          description: Role access denied
    delete:
      security:
        - BasicAuth: []
        - hasRole: [admin]
      description: Delete Adabas Checkpoints out of the database with the given dbid
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      tags:
        - Online
      operationId: deleteDatabaseCheckpoints
      parameters:
        - $ref: "#/parameters/dbidParam"
        - type: string
          description: Timestamp of first checkpoint entry
          name: start_time
          in: query
        - type: string
          description: Timestamp of last checkpoint entry
          name: end_time
          in: query
      responses:
        "200":
          description: "Successful response, when database Checkpoints are deleted"
          schema:
            $ref: "#/definitions/StatusResponse"
        "400":
          description: Database not available
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: Authorization error
        "403":
          description: Role access denied
  "/adabas/database/{dbid}/cluster":
    get:
      security:
        - BasicAuth: []
        - hasRole: [admin]
      description: Retrieve the current status of Adabas cluster
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      tags:
        - Online
      operationId: getAdabasCluster
      parameters:
        - $ref: "#/parameters/targetParam"
      responses:
        "200":
          description: "Successful response, with status of Adabas cluster."
          schema:
            $ref: "#/definitions/Cluster"
        "400":
          description: Database error evaluating cluster
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: Authorization error
        "403":
          description: Role access denied
  "/adabas/database/{dbid}/commandqueue":
    get:
      security:
        - BasicAuth: []
        - hasRole: [admin]
      description: Retrieve a list of user queue entries
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      tags:
        - Online
      operationId: getDatabaseCommandQueue
      parameters:
        - $ref: "#/parameters/targetParam"
        - $ref: "#/parameters/rfc3339Param"
      responses:
        "200":
          description: "Successful response, with database command queue entries"
          schema:
            $ref: "#/definitions/CommandQueue"
        "400":
          description: Database not available/unknown
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: Authorization error
        "403":
          description: Role access denied
  "/adabas/database/{dbid}/commandstats":
    get:
      security:
        - BasicAuth: []
        - hasRole: [admin]
      description: Retrieve Adabas command statistics
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      tags:
        - Online
      operationId: getDatabaseCommandStats
      parameters:
        - $ref: "#/parameters/dbidParam"
      responses:
        "200":
          description: "Successful response, with Adabas command statistics"
          schema:
            $ref: "#/definitions/CommandStats"
        "400":
          description: Database not available/unknown
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: Authorization error
        "403":
          description: Role access denied
    delete:
      security:
        - BasicAuth: []
        - hasRole: [admin]
      description: Reset Adabas command statistics
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      tags:
        - Online
      operationId: resetCommandStats
      parameters:
        - $ref: "#/parameters/targetParam"
      responses:
        "200":
          description: "Successful response, with reseted Adabas command statistics"
          schema:
            $ref: "#/definitions/StatusResponse"
        "400":
          description: Database not available/unknown
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: Authorization error
        "403":
          description: Role access denied
  "/adabas/database/{dbid}/container":
    get:
      security:
        - BasicAuth: []
        - hasRole: [admin]
      description: Retrieve Adabas containers
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      tags:
        - OnlineOffline
      operationId: getDatabaseContainer
      parameters:
        - $ref: "#/parameters/dbidParam"
      responses:
        "200":
          description: "Successful response, with Adabas database containers"
          schema:
            $ref: "#/definitions/ContainerFst"
        "400":
          description: Database not available/unknown
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: Authorization error
        "403":
          description: Role access denied
    post:
      security:
        - BasicAuth: []
        - hasRole: [admin]
      description: Add a container to Adabas
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      tags:
        - OnlineOffline
      operationId: addAdabasContainer
      parameters:
        - $ref: "#/parameters/dbidParam"
        - name: database
          in: body
          schema:
            $ref: "#/definitions/ContainerInfo"
      responses:
        "200":
          description: "Successful response, container added"
          schema:
            $ref: "#/definitions/StatusResponse"
        "400":
          description: Error changing the parameter
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: Authorization error
        "403":
          description: Role access denied
  "/adabas/database/{dbid}/container/${container_type}":
    delete:
      security:
        - BasicAuth: []
        - hasRole: [admin]
      description: Retrieve Adabas containers
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      tags:
        - Offline
      operationId: removeDatabaseContainer
      parameters:
        - $ref: "#/parameters/dbidParam"
        - type: string
          description: "Container type, may be ASSO or DATA"
          name: container_type
          in: path
          required: true
      responses:
        "200":
          description: "Successful response,  Adabas database container is removed"
          schema:
            $ref: "#/definitions/StatusResponse"
        "400":
          description: Database not available/unknown
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: Authorization error
        "403":
          description: Role access denied
  "/adabas/database/{dbid}/fields/{file}":
    get:
      security:
        - BasicAuth: []
        - hasRole: [admin]
      description: Retrieves Adabas FDT information for a file
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      tags:
        - OnlineOffline
      operationId: getFieldDefinitionTable
      parameters:
        - $ref: "#/parameters/targetParam"
        - type: number
          description: >-
            File number and operation seprated by ':' Possible operations are -
            refresh renumber
          name: file
          in: path
          required: true
        - $ref: "#/parameters/rfc3339Param"
      responses:
        "200":
          description: "Successful response, with a FCB representation of the Adabas FCB"
          schema:
            $ref: "#/definitions/Fdt"
        "400":
          description: Error receiving file information
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: Authorization error
        "403":
          description: Role access denied
    post:
      security:
        - BasicAuth: []
        - hasRole: [admin]
      description: Modify Adabas FDT information for a file
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      tags:
        - OnlineOffline
      operationId: modifyFieldDefinitionTable
      parameters:
        - $ref: "#/parameters/targetParam"
        - $ref: "#/parameters/fileParam"
        - type: string
          description: Add fields to the FDT
          name: addfields
          in: query
          required: true
      responses:
        "200":
          description: "Successful response, with a FCB representation of the Adabas FCB"
          schema:
            $ref: "#/definitions/StatusResponse"
        "400":
          description: Error receiving file information
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: Authorization error
        "403":
          description: Role access denied
    delete:
      security:
        - BasicAuth: []
        - hasRole: [admin]
      description: Drop a list of fields in an Adabas file
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      tags:
        - OnlineOffline
      operationId: dropFields
      parameters:
        - $ref: "#/parameters/targetParam"
        - $ref: "#/parameters/fileParam"
        - type: string
          description: List of fields to be deleted
          name: fields
          in: query
          required: true
      responses:
        "200":
          description: "Successful response, with a FCB representation of the Adabas FCB"
          schema:
            $ref: "#/definitions/StatusResponse"
        "400":
          description: Error receiving file information
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: Authorization error
        "403":
          description: Role access denied
  "/adabas/database/{dbid}/file":
    get:
      security:
        - BasicAuth: []
        - hasRole: [admin]
      description: Retrieves a list of files defined in the database
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      tags:
        - OnlineOffline
      operationId: getDatabaseFiles
      parameters:
        - $ref: "#/parameters/targetParam"
      responses:
        "200":
          description: "Successful response, with a representation of the Tax Filing."
          schema:
            $ref: "#/definitions/Files"
        "400":
          description: Database not available/unknown
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: Authorization error
        "403":
          description: Role access denied
    post:
      security:
        - BasicAuth: []
        - hasRole: [admin]
      description: Create a new Adabas file
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      tags:
        - Online
      operationId: postAdabasFile
      parameters:
        - $ref: "#/parameters/targetParam"
        - name: fdufdt
          in: body
          schema:
            $ref: "#/definitions/FduFdt"
      responses:
        "200":
          description: "Successful response, with new Adabas file created"
          schema:
            $ref: "#/definitions/StatusResponse"
        "400":
          description: Error creating Adabas file
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: Authorization error
        "403":
          description: Role access denied
  "/adabas/database/{dbid}/file/{file_operation}":
    get:
      security:
        - BasicAuth: []
        - hasRole: [admin]
      description: Retrieves Adabas FCB information for a file
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      tags:
        - OnlineOffline
      operationId: getDatabaseFile
      parameters:
        - $ref: "#/parameters/targetParam"
        - type: string
          description: >-
            File number and operation separated by ':' Possible operations are -
            refresh renumber rename addlob
          name: file_operation
          in: path
          required: true
        - type: string
          description: Used for operation rename
          name: name
          in: query
        - type: number
          description: Used for operation renumber
          name: number
          in: query
        - $ref: "#/parameters/rfc3339Param"
      responses:
        "200":
          description: "Successful response, with a FCB representation of the Adabas FCB"
          schema:
            $ref: "#/definitions/Fcb"
        "202":
          description: "Operation done"
        "400":
          description: Error receiving file information
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: Authorization error
        "403":
          description: Role access denied
    put:
      security:
        - BasicAuth: []
        - hasRole: [admin]
      description: Adapt a  Adabas file parameter
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      tags:
        - Online
      operationId: putAdabasFileParameter
      parameters:
        - $ref: "#/parameters/targetParam"
        - type: string
          description: >-
            File number and operation, separated with a :. Possible operation
            are renumber, refresh
          name: file_operation
          in: path
          required: true
        - type: number
          description: New File number
          name: number
          in: query
        - type: string
          description: Used for operation rename
          name: name
          in: query
        - type: boolean
          description: Set PGM refresh
          name: pgmrefresh
          in: query
        - type: boolean
          description: Set space resage
          name: spacereusage
          in: query
        - type: boolean
          description: Set ISN resage
          name: isnreusage
          in: query
        - type: boolean
          description: >-
            Enable/Disable file option for spanned records, need to be given
            exclusive
          name: spannedrecords
          in: query
      responses:
        "200":
          description: "Successful response, with new Adabas file created"
          schema:
            $ref: "#/definitions/StatusResponse"
        "400":
          description: Error creating Adabas file
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: Authorization error
        "403":
          description: Role access denied
    post:
      security:
        - BasicAuth: []
        - hasRole: [admin]
      description: Create a new Adabas file
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      tags:
        - Online
      operationId: createAdabasFile
      parameters:
        - $ref: "#/parameters/targetParam"
        - type: string
          description: "File number, the file number in the body is ignored"
          name: file_operation
          in: path
          required: true
        - name: fdufdt
          in: body
          schema:
            $ref: "#/definitions/FduFdt"
      responses:
        "200":
          description: "Successful response, with new Adabas file created"
          schema:
            $ref: "#/definitions/StatusResponse"
        "400":
          description: Error creating Adabas file
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: Authorization error
        "403":
          description: Role access denied
    delete:
      security:
        - BasicAuth: []
        - hasRole: [admin]
      description: Delete the file
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      tags:
        - OnlineOffline
      operationId: deleteFile
      parameters:
        - $ref: "#/parameters/targetParam"
        - type: number
          description: "File number, no operation possible"
          name: file_operation
          in: path
          required: true
      responses:
        "200":
          description: "Successful response, a Adabas file is deleted"
          schema:
            $ref: "#/definitions/StatusResponse"
        "400":
          description: Error deleting the file
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: Authorization error
        "403":
          description: Role access denied
  "/adabas/database/{dbid}/gcb":
    get:
      security:
        - BasicAuth: []
        - hasRole: [admin]
      description: Retrieve the current GCB of the database with the given dbid
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      tags:
        - OnlineOffline
      operationId: getDatabaseGcb2
      parameters:
        - $ref: "#/parameters/dbidParam"
        - $ref: "#/parameters/rfc3339Param"
      responses:
        "200":
          description: "Successful response, with database GCB"
          schema:
            $ref: "#/definitions/DatabaseGcb"
        "400":
          description: Database not available/unknown
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: Authorization error
        "403":
          description: Role access denied
  "/adabas/database/{dbid}/GCB":
    get:
      security:
        - BasicAuth: []
        - hasRole: [admin]
      description: Retrieve the current GCB of the database with the given dbid
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      tags:
        - OnlineOffline
      operationId: getDatabaseGcb
      parameters:
        - $ref: "#/parameters/dbidParam"
        - $ref: "#/parameters/rfc3339Param"
      responses:
        "200":
          description: "Successful response, with database GCB"
          schema:
            $ref: "#/definitions/DatabaseGcb"
        "400":
          description: Database not available/unknown
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: Authorization error
        "403":
          description: Role access denied
  "/adabas/database/{dbid}/holdqueue":
    get:
      security:
        - BasicAuth: []
        - hasRole: [admin]
      description: Retrieve a list of hold queue entries
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      tags:
        - Online
      operationId: getDatabaseHoldQueue
      parameters:
        - $ref: "#/parameters/targetParam"
        - $ref: "#/parameters/rfc3339Param"
      responses:
        "200":
          description: "Successful response, with database hold queue entries"
          schema:
            $ref: "#/definitions/HoldQueue"
        "400":
          description: Database not available/unknown
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: Authorization error
        "403":
          description: Role access denied
  "/adabas/database/{dbid}/hwm":
    get:
      security:
        - BasicAuth: []
        - hasRole: [admin]
      description: Retrieve Adabas High water mark
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      tags:
        - Online
      operationId: getDatabaseHighWater
      parameters:
        - $ref: "#/parameters/targetParam"
        - $ref: "#/parameters/rfc3339Param"
      responses:
        "200":
          description: "Successful response, with Adabas High Water Mark statistics"
          schema:
            $ref: "#/definitions/HWM"
        "400":
          description: Database not available/unknown
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: Authorization error
        "403":
          description: Role access denied
    delete:
      security:
        - BasicAuth: []
        - hasRole: [admin]
      description: Reset Adabas high water statistics
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      tags:
        - Online
      operationId: resetHighWaterMarks
      parameters:
        - $ref: "#/parameters/targetParam"
      responses:
        "200":
          description: "Successful response, with reseted Adabas Highwater Mark statistics"
          schema:
            $ref: "#/definitions/StatusResponse"
        "400":
          description: Database not available/unknown
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: Authorization error
        "403":
          description: Role access denied
  "/adabas/database/{dbid}/nuclog":
    get:
      security:
        - BasicAuth: []
        - hasRole: [admin]
      description: Retrieve Adabas nucleus output
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      tags:
        - OnlineOffline
      operationId: getDatabaseNucleusLog
      parameters:
        - $ref: "#/parameters/targetParam"
      responses:
        "200":
          description: "Successful response, with Adabas Nucleus Log"
          schema:
            $ref: "#/definitions/NucleusLog"
        "400":
          description: Database not available/unknown
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: Authorization error
        "403":
          description: Role access denied
  "/adabas/database/{dbid}/parameter":
    get:
      security:
        - BasicAuth: []
        - hasRole: [admin]
      description: Retrieve Adabas parameters
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      tags:
        - OnlineOffline
      operationId: getDatabaseParameter
      parameters:
        - $ref: "#/parameters/dbidParam"
        - enum:
            - dynamic
            - DYNAMIC
            - static
            - STATIC
          type: string
          description: Type of parameter static or dynamic
          name: type
          in: query
          required: true
      responses:
        "200":
          description: "Successful response, with Adabas database parameters"
          schema:
            $ref: "#/definitions/Parameter"
        "400":
          description: Database not available/unknown
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: Authorization error
        "403":
          description: Role access denied
    put:
      security:
        - BasicAuth: []
        - hasRole: [admin]
      description:
        Change Adabas parameter, Adabas parameter can even be given as request
        parameter
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      tags:
        - OnlineOffline
      operationId: putAdabasParameter
      parameters:
        - $ref: "#/parameters/dbidParam"
        - type: string
          name: AR
          in: query
        - type: boolean
          name: BI
          in: query
        - type: integer
          name: CLOGLAYOUT
          in: query
        - type: boolean
          name: PLOG
          in: query
        - type: integer
          name: LPXA
          in: query
        - type: integer
          name: BFIO
          in: query
        - type: integer
          name: CLOGBMAX
          in: query
        - type: string
          name: LOGGING
          in: query
        - type: integer
          name: NCL
          in: query
        - type: integer
          name: NISNHQ
          in: query
        - type: integer
          name: NT
          in: query
        - type: integer
          name: NU
          in: query
        - type: string
          name: OPTIONS
          in: query
        - type: integer
          name: TNAA
          in: query
        - type: integer
          name: TNAE
          in: query
        - type: integer
          name: TNAX
          in: query
        - type: integer
          name: TT
          in: query
        - type: string
          name: USEREXITS
          in: query
        - type: integer
          name: RPL_RECORDS
          in: query
        - type: integer
          name: RPL_BLOCKS
          in: query
        - type: integer
          name: RPL_TOTAL
          in: query
        - type: integer
          name: LAB
          in: query
        - type: integer
          name: LABX
          in: query
        - type: integer
          name: LBP
          in: query
        - type: integer
          name: LWP
          in: query
        - type: integer
          name: WRITE_LIMIT
          in: query
        - type: integer
          name: APU_UNITS
          in: query
        - type: integer
          name: APU_WORKERS
          in: query
        - type: integer
          name: APU_RECVS
          in: query
        - type: boolean
          name: ADATCP
          in: query
        - type: integer
          name: ADATCPPORT
          in: query
        - type: integer
          name: ADATCPATB
          in: query
        - type: integer
          name: ADATCPRECEIVER
          in: query
        - type: integer
          name: ADATCPCONNECTIONS
          in: query
        - type: integer
          name: SSLPORT
          in: query
        - type: string
          name: SSLCERTFILE
          in: query
        - type: string
          name: SSLKEYFILE
          in: query
        - type: integer
          name: SSLVERIFY
          in: query
        - type: string
          name: SSLCAFILE
          in: query
        - type: string
          name: SSLCADIRECTORY
          in: query
        - type: string
          name: SSLPASSWORD
          in: query
        - enum:
            - dynamic
            - DYNAMIC
            - static
            - STATIC
          type: string
          description: Type of parameter static or dynamic
          name: type
          in: query
          required: true
      responses:
        "200":
          description: "Successful response, parameter changed"
          schema:
            $ref: "#/definitions/StatusResponse"
        "400":
          description: Error changing the parameter
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: Authorization error
        "403":
          description: Role access denied
    post:
      security:
        - BasicAuth: []
        - hasRole: [admin]
      description:
        Change Adabas parameter, Adabas parameter can even be given as request
        parameter
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      tags:
        - OnlineOffline
      operationId: postAdabasParameter
      parameters:
        - $ref: "#/parameters/dbidParam"
        - enum:
            - dynamic
            - DYNAMIC
            - static
            - STATIC
          type: string
          description: Type of parameter static or dynamic
          name: type
          in: query
          required: true
        - name: parameter
          in: body
          schema:
            type: object
      responses:
        "200":
          description: "Successful response, parameter changed"
          schema:
            $ref: "#/definitions/StatusResponse"
        "400":
          description: Error changing the parameter
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: Authorization error
        "403":
          description: Role access denied
  "/adabas/database/{dbid}/parameterinfo":
    get:
      security:
        - BasicAuth: []
        - hasRole: [admin]
      description: Retrieve Adabas parameter metadata information
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      tags:
        - OnlineOffline
      operationId: getDatabaseParameterInfo
      parameters:
        - $ref: "#/parameters/dbidParam"
      responses:
        "200":
          description: "Successful response, with Adabas database parameters"
          schema:
            $ref: "#/definitions/ParameterInfos"
        "400":
          description: Database not available/unknown
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: Authorization error
        "403":
          description: Role access denied
  "/adabas/database/{dbid}/plog":
    get:
      security:
        - BasicAuth: []
        - hasRole: [admin]
      description: Retrieve the current PLOG statistcs of Adabas PLOG
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      tags:
        - Online
      operationId: getPLOGStats
      parameters:
        - $ref: "#/parameters/targetParam"
      responses:
        "200":
          description: "Successful response, with status of Adabas PLOG."
          schema:
            $ref: "#/definitions/PLOG"
        "400":
          description: Database error evaluating TCP list
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: Authorization error
        "403":
          description: Role access denied
  "/adabas/database/{dbid}/tcp":
    get:
      security:
        - BasicAuth: []
        - hasRole: [admin]
      description: Retrieve the current ADATCP connection of Adabas
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      tags:
        - Online
      operationId: getAdabasTCP
      parameters:
        - $ref: "#/parameters/targetParam"
      responses:
        "200":
          description: "Successful response, with status of Adabas cluster."
          schema:
            $ref: "#/definitions/TCP"
        "400":
          description: Database error evaluating TCP list
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: Authorization error
        "403":
          description: Role access denied
    delete:
      security:
        - BasicAuth: []
        - hasRole: [admin]
      description: Disconnect ADATCP connection in the database with the given dbid
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      tags:
        - Online
      operationId: disconnectTCP
      parameters:
        - $ref: "#/parameters/dbidParam"
        - type: integer
          description: First entry of ADATCP connection ID
          name: start_id
          in: query
        - type: integer
          description: Last entry of ADATCP connection ID
          name: end_id
          in: query
      responses:
        "200":
          description: "Successful response, when database ADATCP connections init is send"
          schema:
            $ref: "#/definitions/StatusResponse"
        "400":
          description: Database not available
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: Authorization error
        "403":
          description: Role access denied
  "/adabas/database/{dbid}/threadtable":
    get:
      security:
        - BasicAuth: []
        - hasRole: [admin]
      description: Retrieve Adabas Thread Table
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      tags:
        - Online
      operationId: getDatabaseThreadTable
      parameters:
        - $ref: "#/parameters/targetParam"
      responses:
        "200":
          description: "Successful response, with Adabas Thread table"
          schema:
            $ref: "#/definitions/ThreadTable"
        "400":
          description: Database not available/unknown
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: Authorization error
        "403":
          description: Role access denied
  "/adabas/database/{dbid}/ucb":
    get:
      security:
        - BasicAuth: []
        - hasRole: [admin]
      description: Retrieves Adabas UCB entries
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      tags:
        - OnlineOffline
      operationId: getUCB
      parameters:
        - $ref: "#/parameters/dbidParam"
        - $ref: "#/parameters/rfc3339Param"
      responses:
        "200":
          description: "Successful response, with a list of UCB entries"
          schema:
            $ref: "#/definitions/UCB"
        "400":
          description: Error receiving file information
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: Authorization error
        "403":
          description: Role access denied
  "/adabas/database/{dbid}/ucb/{ucbid}":
    delete:
      security:
        - BasicAuth: []
        - hasRole: [admin]
      description: Delete an Adabas UCB entry
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      tags:
        - OnlineOffline
      operationId: deleteUCB
      parameters:
        - $ref: "#/parameters/dbidParam"
        - type: integer
          description: UCB entry id
          name: ucbid
          in: path
          required: true
      responses:
        "200":
          description: "Successful response, UCB entry is deleted."
          schema:
            $ref: "#/definitions/StatusResponse"
        "400":
          description: Error receiving file information
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: Authorization error
        "403":
          description: Role access denied
  "/adabas/database/{dbid}/userqueue":
    get:
      security:
        - BasicAuth: []
        - hasRole: [admin]
      description: Retrieve a list of user queue entries
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      tags:
        - Online
      operationId: getDatabaseUserQueue
      parameters:
        - $ref: "#/parameters/targetParam"
        - $ref: "#/parameters/rfc3339Param"
      responses:
        "200":
          description: "Successful response, with database user queue entries"
          schema:
            $ref: "#/definitions/UserQueue"
        "400":
          description: Database not available or offline
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: Authorization error
        "403":
          description: Role access denied
  "/adabas/database/{dbid}/userqueue/{queueid}":
    get:
      security:
        - BasicAuth: []
        - hasRole: [admin]
      description: Provide User queue details of an specific user queue element
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      tags:
        - Online
      operationId: getUserQueueDetail
      parameters:
        - $ref: "#/parameters/targetParam"
        - type: number
          description: User Queue ID
          name: queueid
          in: path
          required: true
        - $ref: "#/parameters/rfc3339Param"
      responses:
        "200":
          description: "Successful response, a User queue detailed are received"
          schema:
            $ref: "#/definitions/UserQueueDetail"
        "400":
          description: Error finding user queue entry
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: Authorization error
        "403":
          description: Role access denied
    delete:
      security:
        - BasicAuth: []
        - hasRole: [admin]
      description: Stop the User Queue element
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      tags:
        - Online
      operationId: stopUserQueueEntry
      parameters:
        - $ref: "#/parameters/targetParam"
        - type: number
          description: User Queue ID
          name: queueid
          in: path
          required: true
        - type: number
          description: If range of users this is the user id end User Queue entry
          name: toqueueid
          in: query
          required: false
      responses:
        "200":
          description: "Successful response, a User queue is stopped"
        "400":
          description: Error stopping the database user queue entry
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: Authorization error
        "403":
          description: Role access denied
  /adabas/env:
    get:
      security:
        - BasicAuth: []
        - hasRole: [admin]
      description: Retrieves a list of Adabas version installations used
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      tags:
        - OnlineOffline
      operationId: getDatabasesInstallation
      responses:
        "200":
          description: "Successful response, with list of known databases."
          schema:
            $ref: "#/definitions/AdabasEnvironment"
        "400":
          description: Database error evaluating list
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: Authorization error
        "403":
          description: Role access denied
  "/binary/db/{dbid}/{file}/{isn}/{field}":
    get:
      security:
        - BasicAuth: []
        - hasRole: [user]
      description: Retrieves a lob of a specific ISN of an field
      consumes:
        - application/json
        - application/xml
      produces:
        - application/octet-stream
      tags:
        - ClassicDatabaseAccess
      operationId: getLob
      parameters:
        - $ref: "#/parameters/targetParam"
        - type: string
          description: Remote node reference
          name: reference
          in: query
        - type: integer
          description: Database file
          name: file
          in: path
          required: true
        - type: string
          description: Specific ISN number
          name: isn
          in: path
          required: true
        - type: string
          description: Specific the field to be
          name: field
          in: path
          required: true
        - type: string
          description: Specific the data MIME type
          name: mimetype
          in: query
        - $ref: "#/parameters/searchParam"
      responses:
        "200":
          description: "Successful response, retrieve the field information."
          schema:
            type: file
        "401":
          description: Authorization error
        "403":
          description: The requested data was forbidden.
        "404":
          description: Could not read the specified field.
          schema:
            $ref: "#/definitions/Error"
    put:
      security:
        - BasicAuth: []
        - hasRole: [user]
      description: Set a lob at a specific ISN of an field in a Map
      consumes:
        - application/octet-stream
        - multipart/form-data
      tags:
        - ClassicDatabaseAccess
      operationId: updateLob
      parameters:
        - $ref: "#/parameters/targetParam"
        - type: string
          description: Remote node reference
          name: reference
          in: query
        - type: integer
          description: Database file
          name: file
          in: path
          required: true
        - type: integer
          description: Specific ISN number
          name: isn
          in: path
          required: true
        - type: string
          description: Specific the field to be
          name: field
          in: path
          required: true
        - type: file
          description: Upload raw binary content of field
          name: uploadLob
          in: formData
          required: true
      responses:
        "200":
          description: "Successful response, database record is updated."
          schema:
            $ref: "#/definitions/StoreResponse"
        "401":
          description: Authorization error
        "403":
          description: Role access denied
        "404":
          description: Could not read the specified field.
          schema:
            $ref: "#/definitions/Error"
  "/binary/map/{name}/{isn}/{field}":
    get:
      security:
        - BasicAuth: []
        - hasRole: [user]
      description: Retrieves a lob of a specific ISN of an field in a Map
      produces:
        - application/octet-stream
      tags:
        - MapDatabaseAccess
      operationId: getLobByMap
      parameters:
        - $ref: "#/parameters/mapParam"
        - type: string
          description: Specific ISN number
          name: isn
          in: path
          required: true
        - type: string
          description: Specific the field to be
          name: field
          in: path
          required: true
        - type: string
          description: Specific the data MIME type
          name: mimetype
          in: query
        - $ref: "#/parameters/searchParam"
      responses:
        "200":
          description: "Successful response, retrieve the field information."
          schema:
            type: file
        "401":
          description: Authorization error
        "403":
          description: Role access denied
        "404":
          description: Could not read the specified field.
          schema:
            $ref: "#/definitions/Error"
    put:
      security:
        - BasicAuth: []
        - hasRole: [user]
      description: Set a lob at a specific ISN of an field in a Map
      consumes:
        - application/octet-stream
        - multipart/form-data
      tags:
        - MapDatabaseAccess
      operationId: updateLobByMap
      parameters:
        - type: string
          description: Map name
          name: name
          in: path
          required: true
        - type: integer
          description: Specific ISN number
          name: isn
          in: path
          required: true
        - type: string
          description: Specific the field to be
          name: field
          in: path
          required: true
        - type: file
          description: Upload raw binary content of field
          name: uploadLob
          in: formData
          required: true
      responses:
        "200":
          description: "Successful response, database record is updated."
          schema:
            $ref: "#/definitions/StoreResponse"
        "401":
          description: Authorization error
        "403":
          description: Role access denied
        "404":
          description: Could not read the specified field.
          schema:
            $ref: "#/definitions/Error"
  "/file/access/{location}":
    get:
      security:
        - BasicAuth: []
        - hasRole: [admin]
      description: Download a file out of file location
      produces:
        - application/octet-stream
      tags:
        - Browser
      operationId: downloadFile
      parameters:
        - $ref: "#/parameters/locationParam"
        - $ref: "#/parameters/fileReferenceParam"
      responses:
        "200":
          description: "Successful response, with download binary file."
          schema:
            type: file
        "400":
          description: Environment evaluation error
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: Authorization error
        "403":
          description: Role access denied
        "404":
          description: Location not available/unknown
          schema:
            $ref: "#/definitions/Error"
    put:
      security:
        - BasicAuth: []
        - hasRole: [admin]
      description: Create a new directory
      consumes:
        #        - multipart/form-data
        - application/json
        - application/xml
        - plain/text
      produces:
        - application/json
        - application/xml
      tags:
        - Browser
      operationId: createDirectory
      parameters:
        - $ref: "#/parameters/locationParam"
        - $ref: "#/parameters/fileReferenceParam"
      #        - type: file
      #          description: Upload file
      #          name: uploadFile
      #          in: formData
      #          required: false
      responses:
        "200":
          description: "Successful response, if the directory is created."
          schema:
            $ref: "#/definitions/StatusResponse"
        "400":
          description: Environment evaluation error
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: Authorization error
        "403":
          description: Role access denied
        "404":
          description: Location not available/unknown
          schema:
            $ref: "#/definitions/Error"
    post:
      security:
        - BasicAuth: []
        - hasRole: [admin]
      description: Upload a new file to the given location
      consumes:
        - application/octet-stream
        - multipart/form-data
      produces:
        - application/json
        - application/xml
        - text/plain
      tags:
        - Browser
      operationId: uploadFile
      parameters:
        - $ref: "#/parameters/locationParam"
        - $ref: "#/parameters/fileReferenceParam"
        - type: file
          description: Upload file
          name: uploadFile
          in: formData
          required: true
      responses:
        "200":
          description: "Successful response, with download binary file."
          schema:
            $ref: "#/definitions/StatusResponse"
        "400":
          description: Environment evaluation error
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: Authorization error
        "403":
          description: Role access denied
        "404":
          description: Location not available/unknown
          schema:
            $ref: "#/definitions/Error"
    delete:
      security:
        - BasicAuth: []
        - hasRole: [admin]
      description: Delete the file on the given location
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      tags:
        - Browser
      operationId: deleteFileLocation
      parameters:
        - $ref: "#/parameters/locationParam"
        - $ref: "#/parameters/fileReferenceParam"
      responses:
        "200":
          description: "Successful response, if delete of file done."
          schema:
            $ref: "#/definitions/StatusResponse"
        "400":
          description: Environment evaluation error
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: Authorization error
        "403":
          description: Role access denied
        "404":
          description: Location not available/unknown
          schema:
            $ref: "#/definitions/Error"
  /file/browse:
    get:
      security:
        - BasicAuth: []
        - hasRole: [admin]
      description: Retrieves a list of Browseable locations
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      tags:
        - Browser
      operationId: browseList
      responses:
        "200":
          description: "Successful response, with list of known databases."
          schema:
            $ref: "#/definitions/Directories"
        "400":
          description: Environment evaluation error
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: Authorization error
        "403":
          description: Role access denied
        "404":
          description: Database not available/unknown
          schema:
            $ref: "#/definitions/Error"
  "/file/browse/{location}":
    get:
      security:
        - BasicAuth: []
        - hasRole: [admin]
      description: Retrieves a list of files in the defined location.
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      tags:
        - Browser
      operationId: browse
      parameters:
        - $ref: "#/parameters/locationParam"
        - type: string
          description: Identifier of the file location
          name: file
          in: query
      responses:
        "200":
          description: "Successful response, with list of known databases."
          schema:
            $ref: "#/definitions/FileLocation"
        "400":
          description: Environment evaluation error
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: Authorization error
        "403":
          description: Role access denied
        "404":
          description: Database not available/unknown
          schema:
            $ref: "#/definitions/Error"
  "/image/db/{dbid}/{file}/{isn}/{field}":
    get:
      security:
        - BasicAuth: []
        - hasRole: [user]
      description: Retrieves a field of a specific ISN of a Map definition
      produces:
        - image/jpeg
        - image/gif
        - image/png
      tags:
        - ClassicDatabaseAccess
      operationId: getImage
      parameters:
        - $ref: "#/parameters/targetParam"
        - type: string
          description: Remote node reference
          name: reference
          in: query
        - type: integer
          description: Database file
          name: file
          in: path
          required: true
        - type: integer
          description: Specific ISN number
          name: isn
          in: path
          required: true
        - type: string
          description: Specific the field to be
          name: field
          in: path
          required: true
        - $ref: "#/parameters/searchParam"
      responses:
        "200":
          description: "Successful response, retrieve the field information."
          schema:
            type: file
        "401":
          description: Unauthorized access
          headers:
            WWW_Authenticate:
              type: string
        "403":
          description: The requested data was forbidden.
        "404":
          description: Could not read the specified field.
          schema:
            $ref: "#/definitions/Error"
  "/image/map/{name}/{isn}/{field}":
    get:
      security:
        - BasicAuth: []
        - hasRole: [user]
      description: Retrieves a field of a specific ISN of a Map definition
      produces:
        - image/jpeg
        - image/gif
        - image/png
      tags:
        - MapDatabaseAccess
      operationId: getImageByMap
      parameters:
        - type: string
          description: Map name
          name: name
          in: path
          required: true
        - type: string
          description: Specific ISN number
          name: isn
          in: path
          required: true
        - type: string
          description: Specific the field to be
          name: field
          in: path
          required: true
        - $ref: "#/parameters/searchParam"
      responses:
        "200":
          description: "Successful response, retrieve the field information."
          schema:
            type: file
        "401":
          description: Authorization error
        "403":
          description: Role access denied
        "404":
          description: Could not read the specified field.
          schema:
            $ref: "#/definitions/Error"
    put:
      security:
        - BasicAuth: []
        - hasRole: [user]
      description: Upload a LOB date to the given database field
      consumes:
        - application/octet-stream
        - multipart/form-data
      produces:
        - application/json
        - application/xml
        - text/plain
      tags:
        - MapDatabaseAccess
      operationId: uploadImage
      parameters:
        - type: string
          description: Map name
          name: name
          in: path
          required: true
        - type: integer
          description: Specific ISN number
          name: isn
          in: path
          required: true
        - type: string
          description: Specific the field to be
          name: field
          in: path
          required: true
        - type: file
          description: Upload image
          name: uploadImage
          in: formData
          required: true
      responses:
        "200":
          description: "Successful response, with upload binary data."
          schema:
            $ref: "#/definitions/StatusResponse"
        "400":
          description: Environment evaluation error
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: Authorization error
        "403":
          description: Role access denied
        "404":
          description: Location not available/unknown
          schema:
            $ref: "#/definitions/Error"
  "/video/db/{dbid}/{file}/{isn}/{field}":
    get:
      security:
        - BasicAuth: []
        - hasRole: [user]
      description: Retrieves a video stream of a specific ISN of a Map definition
      produces:
        - video/mp4
        - video/mov
      tags:
        - ClassicDatabaseAccess
      operationId: getVideo
      parameters:
        - $ref: "#/parameters/targetParam"
        - type: string
          description: Remote node reference
          name: reference
          in: query
        - type: integer
          description: Database file
          name: file
          in: path
          required: true
        - type: integer
          description: Specific ISN number
          name: isn
          in: path
          required: true
        - type: string
          description: Specific the field to be streamed
          name: field
          in: path
          required: true
        - type: string
          description: Specific the field containing the mimetype
          name: mimetypeField
          in: query
          required: true
        - $ref: "#/parameters/searchParam"
      responses:
        "200":
          description: "Successful response, retrieve the field information."
          schema:
            type: file
        "401":
          description: Unauthorized access
          headers:
            WWW_Authenticate:
              type: string
        "403":
          description: The requested data was forbidden.
        "404":
          description: Could not read the specified field.
          schema:
            $ref: "#/definitions/Error"
  /rest/db:
    get:
      security:
        - BasicAuth: []
        - hasRole: [user]
      description: Retrieves a list of known databases.
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      tags:
        - ClassicDatabaseAccess
      operationId: getOnlineDatabases
      responses:
        "200":
          description: "Successful response, with list of known databases."
          schema:
            $ref: "#/definitions/OnlineDatabases"
          headers:
            X-Rest-Token:
              type: string
            WWW_Authenticate:
              type: string
          examples:
            application/json:
              Databases:
                - url: "23(tcpip://pctkn7:0)"
                - url: "24(tcpip://pctkn7:0)"
                - url: "25(tcpip://pctkn7:0)"
            application/xml:
              Databases:
                - url: "23(tcpip://pctkn7:0)"
                - url: "24(tcpip://pctkn7:0)"
                - url: "25(tcpip://pctkn7:0)"
        "401":
          description: Authorization error
        "403":
          description: Role access denied
        "404":
          description: Error requesting database list.
          schema:
            $ref: "#/definitions/Error"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
  "/rest/db/{dbid}":
    get:
      security:
        - BasicAuth: []
        - hasRole: [user]
      description: Retrieves a list of files contained in the given database
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      tags:
        - ClassicDatabaseAccess
      operationId: getFiles
      parameters:
        - $ref: "#/parameters/targetParam"
        - type: string
          description: Remote node reference
          name: reference
          in: query
      responses:
        "200":
          description: "Successful response, with a list of known files in the database"
          schema:
            $ref: "#/definitions/DbFiles"
          examples:
            Files:
              File:
                - 8
                - 9
                - 11
        "400":
          description: Parameter error
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: Authorization error
        "403":
          description: The requested data was forbidden.
        "404":
          description: Error retrieving database list
          schema:
            $ref: "#/definitions/Error"
  "/rest/db/{dbid}/{file}":
    get:
      security:
        - BasicAuth: []
        - hasRole: [user]
      description: Get database records of a given database and file
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      tags:
        - ClassicDatabaseAccess
      operationId: getClassicRecordData
      parameters:
        - $ref: "#/parameters/targetParam"
        - type: number
          description: File number
          name: file
          in: path
          required: true
        - $ref: "#/parameters/fieldsParam"
        - $ref: "#/parameters/startParam"
        - $ref: "#/parameters/limitParam"
        - $ref: "#/parameters/sortParam"
        - $ref: "#/parameters/searchParam"
        - type: string
          description: Remote node reference
          name: reference
          in: query
        - $ref: "#/parameters/compactParam"
        - $ref: "#/parameters/flattenParam"
        - $ref: "#/parameters/descriptorParam"
        - type: boolean
          description: Use XML notation namespace
          name: xmlnotation
          in: query
      responses:
        "200":
          description: "Successful response, with a representation of the data."
          schema:
            $ref: "#/definitions/Response"
        "400":
          description: Parameter errors or wrong request
        "401":
          description: Authorization error
        "403":
          description: The requested data was forbidden.
        "404":
          description: The requested data was not found.
          schema:
            $ref: "#/definitions/Error"
    put:
      security:
        - BasicAuth: []
        - hasRole: [user]
      description: Update record data
      consumes:
        - application/json
        - application/xml
        - text/plain
      produces:
        - application/json
        - application/xml
      tags:
        - ClassicDatabaseAccess
      operationId: putClassicRecordData
      parameters:
        - $ref: "#/parameters/targetParam"
        - type: string
          description: Remote node reference
          name: reference
          in: query
        - type: number
          description: File number
          name: file
          in: path
          required: true
        - description: Data content
          name: data
          in: body
          required: true
          schema:
            $ref: "#/definitions/Records"
      responses:
        "200":
          description: "Successful response, database record is updated."
          schema:
            $ref: "#/definitions/StoreResponse"
        "401":
          description: Authorization error
        "403":
          description: The requested data was forbidden.
        "404":
          description: Could not update database record.
          schema:
            $ref: "#/definitions/Error"
    post:
      security:
        - BasicAuth: []
        - hasRole: [user]
      description: Insert database record
      consumes:
        - application/json
        - application/xml
        - text/plain
      produces:
        - application/json
        - application/xml
      tags:
        - ClassicDatabaseAccess
      operationId: postClassicRecordData
      parameters:
        - $ref: "#/parameters/targetParam"
        - type: number
          description: File number
          name: file
          in: path
          required: true
        - type: string
          description: Remote node reference
          name: reference
          in: query
        - description: Data content
          name: data
          in: body
          required: true
          schema:
            $ref: "#/definitions/Records"
      responses:
        "200":
          description: "Successful response, database record inserted."
          schema:
            $ref: "#/definitions/StoreResponse"
        "401":
          description: Authorization error
        "403":
          description: The requested data was forbidden.
        "404":
          description: Error inserting database record.
          schema:
            $ref: "#/definitions/Error"
  "/rest/db/{dbid}/{file}/{isn}":
    get:
      security:
        - BasicAuth: []
        - hasRole: [user]
      description: Retrieve database record(s) of a given ISN
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      tags:
        - ClassicDatabaseAccess
      operationId: getClassicIsnRecordData
      parameters:
        - $ref: "#/parameters/targetParam"
        - type: number
          description: File number
          name: file
          in: path
          required: true
        - type: number
          description: ISN number or "*" for all records
          name: isn
          in: path
          required: true
        - type: string
          description: Remote node reference
          name: reference
          in: query
        - $ref: "#/parameters/fieldsParam"
        - $ref: "#/parameters/startParam"
        - $ref: "#/parameters/limitParam"
        - $ref: "#/parameters/sortParam"
        - $ref: "#/parameters/searchParam"
        - $ref: "#/parameters/compactParam"
        - $ref: "#/parameters/flattenParam"
        - $ref: "#/parameters/descriptorParam"
        - type: boolean
          description: Use XML notation namespace
          name: xmlnotation
          in: query
      responses:
        "200":
          description: >-
            Successful response, with a representation of the database record of
            given ISN.
          schema:
            $ref: "#/definitions/Response"
        "401":
          description: Authorization error
        "403":
          description: The requested data was forbidden.
        "404":
          description: The requested database record cannot be returned.
          schema:
            $ref: "#/definitions/Error"
    put:
      security:
        - BasicAuth: []
        - hasRole: [user]
      description: Update database record of a given ISN.
      consumes:
        - application/json
        - application/xml
        - text/plain
      produces:
        - application/json
        - application/xml
      tags:
        - ClassicDatabaseAccess
      operationId: putClassicIsnRecordData
      parameters:
        - $ref: "#/parameters/targetParam"
        - type: number
          description: File number
          name: file
          in: path
          required: true
        - type: number
          description: ISN number to be updated
          name: isn
          in: path
          required: true
        - type: string
          description: Remote node reference
          name: reference
          in: query
        - description: Data content
          name: data
          in: body
          required: true
          schema:
            $ref: "#/definitions/Records"
      responses:
        "200":
          description: "Successful response, database record updated."
          schema:
            $ref: "#/definitions/StoreResponse"
        "401":
          description: Authorization error
        "403":
          description: The requested data was forbidden.
        "404":
          description: The requested database record could not be updated.
          schema:
            $ref: "#/definitions/Error"
    post:
      security:
        - BasicAuth: []
        - hasRole: [user]
      description: Insert database record at given ISN.
      consumes:
        - application/json
        - application/xml
        - text/plain
      produces:
        - application/json
        - application/xml
      tags:
        - ClassicDatabaseAccess
      operationId: postClassicIsnRecordData
      parameters:
        - $ref: "#/parameters/targetParam"
        - type: number
          description: File number
          name: file
          in: path
          required: true
        - type: number
          description: ISN number to be inserted
          name: isn
          in: path
          required: true
        - type: string
          description: Remote node reference
          name: reference
          in: query
        - description: Data content
          name: data
          in: body
          required: true
          schema:
            $ref: "#/definitions/Records"
      responses:
        "200":
          description: "Successful response, database record inserted."
          schema:
            $ref: "#/definitions/StoreResponse"
        "401":
          description: Authorization error
        "403":
          description: The requested data was forbidden.
        "404":
          description: Insert could not be done.
          schema:
            $ref: "#/definitions/Error"
    delete:
      security:
        - BasicAuth: []
        - hasRole: [user]
      description: Delete a specific ISN
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      tags:
        - ClassicDatabaseAccess
      operationId: deleteClassicIsnRecordData
      parameters:
        - $ref: "#/parameters/targetParam"
        - type: number
          description: File number
          name: file
          in: path
          required: true
        - type: number
          description: ISN of the record to be deleted
          name: isn
          in: path
          required: true
        - type: string
          description: Remote node reference
          name: reference
          in: query
      responses:
        "200":
          description: "Successful response, the record is deleted."
          schema:
            $ref: "#/definitions/Info"
        "401":
          description: Authorization error
        "403":
          description: The requested data was forbidden.
        "404":
          description: Delete of the request was not finished.
          schema:
            $ref: "#/definitions/Error"
  "/rest/db/{dbid}/{file}/{isn}/{field}":
    get:
      security:
        - BasicAuth: []
        - hasRole: [user]
      description: Retrieve a specific database record field data.
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      tags:
        - ClassicDatabaseAccess
      operationId: getClassicIsnFieldRecordData
      parameters:
        - $ref: "#/parameters/targetParam"
        - type: number
          description: File number
          name: file
          in: path
          required: true
        - type: string
          description: Remote node reference
          name: reference
          in: query
        - type: string
          description: ISN number or "*" for all records
          name: isn
          in: path
          required: true
        - type: string
          description: Field to be read
          name: field
          in: path
          required: true
        - $ref: "#/parameters/startParam"
        - $ref: "#/parameters/limitParam"
        - $ref: "#/parameters/sortParam"
        - $ref: "#/parameters/searchParam"
        - $ref: "#/parameters/compactParam"
        - $ref: "#/parameters/flattenParam"
        - $ref: "#/parameters/descriptorParam"
        - type: boolean
          description: Use XML notation namespace
          name: xmlnotation
          in: query
      responses:
        "200":
          description: "Successful response, with database data of the request field."
          schema:
            $ref: "#/definitions/Response"
        "401":
          description: Authorization error
        "403":
          description: The requested data was forbidden.
        "404":
          description: The requested database record field could not be returned.
          schema:
            $ref: "#/definitions/Error"
    put:
      security:
        - BasicAuth: []
        - hasRole: [user]
      description: Update database record field
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      tags:
        - ClassicDatabaseAccess
      operationId: putClassicIsnFieldRecordData
      parameters:
        - $ref: "#/parameters/targetParam"
        - type: number
          description: File number
          name: file
          in: path
          required: true
        - type: number
          description: ISN number to be updated
          name: isn
          in: path
          required: true
        - type: number
          description: Field to be updated
          name: field
          in: path
          required: true
        - type: string
          description: Remote node reference
          name: reference
          in: query
        - description: Data content
          name: data
          in: body
          required: true
          schema:
            $ref: "#/definitions/Records"
      responses:
        "200":
          description: "Successful response, database record updated."
          schema:
            $ref: "#/definitions/Response"
        "401":
          description: Authorization error
        "403":
          description: The requested data was forbidden.
        "404":
          description: The requested database record could not be  updated
          schema:
            $ref: "#/definitions/Error"
  /rest/map:
    get:
      security:
        - BasicAuth: []
        - hasRole: [user]
      description: Retrieves a list of available maps
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      tags:
        - MapDatabaseAccess
      operationId: getMaps
      responses:
        "200":
          description: "Successful response, with the list of available maps."
          schema:
            $ref: "#/definitions/Maps"
          examples:
            application/json:
              Maps:
                - EMPLOYEE-FDT
                - EMPLOYEES-NAT
                - EMPLOYEES-NAT-DDM
        "401":
          description: Authorization error
        "403":
          description: Role access denied
        "404":
          description: Error requesting the list of maps.
          schema:
            $ref: "#/definitions/Error"
    post:
      security:
        - BasicAuth: []
        - hasRole: [user]
      description: Store send records into Map definition
      consumes:
        - multipart/form-data
      produces:
        - application/json
        - application/xml
      tags:
        - MapDatabaseAccess
      operationId: insertMapFileRecords
      parameters:
        - in: formData
          name: data
          type: file
          description: The file to upload.
      responses:
        "200":
          description: "Successful response, send record is stored."
          schema:
            $ref: "#/definitions/StoreResponse"
        "401":
          description: Authorization error
        "403":
          description: Role access denied
        "404":
          description: Error storing the record.
          schema:
            $ref: "#/definitions/Error"
  "/rest/map/{name}":
    get:
      security:
        - BasicAuth: []
        - hasRole: [user]
      description: Retrieves all records of a Map definition
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      tags:
        - MapDatabaseAccess
      operationId: getMapRecords
      parameters:
        - $ref: "#/parameters/mapParam"
        - $ref: "#/parameters/fieldsParam"
        - $ref: "#/parameters/startParam"
        - $ref: "#/parameters/limitParam"
        - $ref: "#/parameters/sortParam"
        - $ref: "#/parameters/searchParam"
        - $ref: "#/parameters/compactParam"
        - $ref: "#/parameters/flattenParam"
        - $ref: "#/parameters/descriptorParam"
        - type: boolean
          description: Use XML notation namespace
          name: xmlnotation
          in: query
      responses:
        "200":
          description: "Successful response, with a number of records of the map."
          schema:
            $ref: "#/definitions/Response"
        "401":
          description: Authorization error
        "403":
          description: Role access denied
        "404":
          description: The requested map was not found.
          schema:
            $ref: "#/definitions/Error"
    put:
      security:
        - BasicAuth: []
        - hasRole: [user]
      description: Update send records into a Map definition
      consumes:
        - application/json
        - application/xml
        - text/plain
      produces:
        - application/json
        - application/xml
      tags:
        - MapDatabaseAccess
      operationId: updateMapRecords
      parameters:
        - $ref: "#/parameters/mapParam"
        - description: Data content
          name: data
          in: body
          required: true
          schema:
            $ref: "#/definitions/Records"
      responses:
        "200":
          description: "Successful response, send record is stored."
          schema:
            $ref: "#/definitions/StoreResponse"
        "401":
          description: Authorization error
        "403":
          description: Role access denied
        "404":
          description: Error storing the record.
          schema:
            $ref: "#/definitions/Error"
    post:
      security:
        - BasicAuth: []
        - hasRole: [user]
      description: Store send records into Map definition
      consumes:
        - application/json
        - application/xml
        - text/plain
      produces:
        - application/json
        - application/xml
      tags:
        - MapDatabaseAccess
      operationId: insertMapRecords
      parameters:
        - $ref: "#/parameters/mapParam"
        - description: Data content
          name: data
          in: body
          required: true
          schema:
            $ref: "#/definitions/Records"
      responses:
        "200":
          description: "Successful response, send record is stored."
          schema:
            $ref: "#/definitions/StoreResponse"
        "401":
          description: Authorization error
        "403":
          description: Role access denied
        "404":
          description: Error storing the record.
          schema:
            $ref: "#/definitions/Error"
  "/rest/map/{name}/{isn}":
    get:
      security:
        - BasicAuth: []
        - hasRole: [user]
      description: Retrieves all records of specific ISN in a Map definition
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      tags:
        - MapDatabaseAccess
      operationId: getIsnSpecificRecord
      parameters:
        - $ref: "#/parameters/mapParam"
        - type: string
          description: Specific ISN number or "*" for all ISN
          name: isn
          in: path
          required: true
        - $ref: "#/parameters/fieldsParam"
        - $ref: "#/parameters/startParam"
        - $ref: "#/parameters/limitParam"
        - $ref: "#/parameters/sortParam"
        - $ref: "#/parameters/searchParam"
        - $ref: "#/parameters/compactParam"
        - $ref: "#/parameters/flattenParam"
        - $ref: "#/parameters/descriptorParam"
        - type: boolean
          description: Use XML notation namespace
          name: xmlnotation
          in: query
      responses:
        "200":
          description: "Successful response, read of the data."
          schema:
            $ref: "#/definitions/Response"
        "401":
          description: Authorization error
        "403":
          description: Role access denied
        "404":
          description: Error reading a specific ISN
          schema:
            $ref: "#/definitions/Error"
    put:
      security:
        - BasicAuth: []
        - hasRole: [user]
      description: Update a record of a Map definition
      consumes:
        - application/json
        - application/xml
        - text/plain
      produces:
        - application/json
        - application/xml
      tags:
        - MapDatabaseAccess
      operationId: putIsnSpecificRecord
      parameters:
        - $ref: "#/parameters/mapParam"
        - type: string
          description: Specific ISN number or "*" for all ISN
          name: isn
          in: path
          required: true
        - $ref: "#/parameters/fieldsParam"
        - $ref: "#/parameters/startParam"
        - $ref: "#/parameters/limitParam"
        - $ref: "#/parameters/sortParam"
        - $ref: "#/parameters/searchParam"
        - $ref: "#/parameters/compactParam"
        - $ref: "#/parameters/flattenParam"
        - $ref: "#/parameters/descriptorParam"
        - $ref: "#/parameters/exchangeParam"
        - type: boolean
          description: Use XML notation namespace
          name: xmlnotation
          in: query
        - description: Data content
          name: data
          in: body
          required: true
          schema:
            $ref: "#/definitions/Records"
      responses:
        "200":
          description: "Successful response, Update a specific record."
          schema:
            $ref: "#/definitions/StoreResponse"
        "401":
          description: Authorization error
        "403":
          description: Role access denied
        "404":
          description: The requested update cannot be done.
          schema:
            $ref: "#/definitions/Error"
    post:
      security:
        - BasicAuth: []
        - hasRole: [user]
      description: Insert a new records of a Map definition
      consumes:
        - application/json
        - application/xml
        - text/plain
      produces:
        - application/json
        - application/xml
      tags:
        - MapDatabaseAccess
      operationId: postIsnSpecificRecord
      parameters:
        - $ref: "#/parameters/mapParam"
        - type: string
          description: Specific ISN number or "*" for all ISN
          name: isn
          in: path
          required: true
        - description: Data content
          name: data
          in: body
          required: true
          schema:
            $ref: "#/definitions/Records"
      responses:
        "200":
          description: "Successful response, new record is inserted."
          schema:
            $ref: "#/definitions/StoreResponse"
        "401":
          description: Authorization error
        "403":
          description: Role access denied
        "404":
          description: The new record could not be inserted.
          schema:
            $ref: "#/definitions/Error"
    delete:
      security:
        - BasicAuth: []
        - hasRole: [user]
      description: Delete a record of Map definition
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      tags:
        - MapDatabaseAccess
      operationId: deleteIsnSpecificRecord
      parameters:
        - $ref: "#/parameters/mapParam"
        - type: string
          description: Specific ISN number or "*" for all ISN
          name: isn
          in: path
          required: true
      responses:
        "200":
          description: "Successful response, map record deleted."
          schema:
            $ref: "#/definitions/Response"
        "401":
          description: Authorization error
        "403":
          description: Role access denied
        "404":
          description: Error deleting the record.
          schema:
            $ref: "#/definitions/Error"
  "/rest/map/{name}/{isn}/{field}":
    get:
      security:
        - BasicAuth: []
        - hasRole: [user]
      description: Retrieves a field of a specific ISN of a Map definition
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      tags:
        - MapDatabaseAccess
      operationId: getMapRecordsFields
      parameters:
        - $ref: "#/parameters/mapParam"
        - type: string
          description: Specific ISN number or "*" for all ISN
          name: isn
          in: path
          required: true
        - type: string
          description: Specific a comma separated list of fields to be part of the result record
          name: field
          in: path
          required: true
        - $ref: "#/parameters/startParam"
        - $ref: "#/parameters/limitParam"
        - $ref: "#/parameters/sortParam"
        - $ref: "#/parameters/searchParam"
        - $ref: "#/parameters/compactParam"
        - $ref: "#/parameters/flattenParam"
        - $ref: "#/parameters/descriptorParam"
        - type: boolean
          description: Use XML notation namespace
          name: xmlnotation
          in: query
      responses:
        "200":
          description: "Successful response, retrieve the field information."
          schema:
            $ref: "#/definitions/Response"
        "401":
          description: Authorization error
        "403":
          description: Role access denied
        "404":
          description: Could not read the specified field.
          schema:
            $ref: "#/definitions/Error"
  "/rest/metadata/map/{name}":
    get:
      security:
        - BasicAuth: []
        - hasRole: [user]
      description: Retrieves metadata of a Map definition
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      tags:
        - MapDatabaseAccess
      operationId: getMapMetadata
      parameters:
        - $ref: "#/parameters/mapParam"
      responses:
        "200":
          description: "Successful response, retrieve the map metadata."
          schema:
            $ref: "#/definitions/mapping"
        "401":
          description: Authorization error
        "403":
          description: Role access denied
        "404":
          description: Could not read or don't found the specified map metadata.
          schema:
            $ref: "#/definitions/Error"
  /rest/fields/{dbid}/{file}:
    get:
      security:
        - BasicAuth: []
        - hasRole: [user]
      description: Retrieves all fields of an Adabas file
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      tags:
        - ClassicDatabaseAccess
      operationId: getFields
      parameters:
        - $ref: "#/parameters/targetParam"
        - $ref: "#/parameters/fileParam"
      responses:
        "200":
          description: "Successful response, with the list of fields in Adabas file."
          schema:
            $ref: "#/definitions/Fields"
        "400":
          description: Wrong paramters
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: Authorization error
        "403":
          description: Role access denied
        "404":
          description: Error requesting the list of maps.
          schema:
            $ref: "#/definitions/Error"
  /scheduler/job:
    get:
      security:
        - BasicAuth: []
        - hasRole: [admin]
      description: Retrieves a list of jobs known by Adabas Interface.
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      tags:
        - Scheduler
      parameters:
        - type: string
          description: Timestamp of first job entry
          name: start_time
          in: query
        - type: string
          description: Timestamp of last job entry
          name: end_time
          in: query
      operationId: getJobs
      responses:
        "200":
          description: "Successful response, with list of known databases."
          schema:
            $ref: "#/definitions/JobsList"
        "401":
          description: Authorization error
        "403":
          description: Role access denied
        "404":
          description: Database not available/unknown
    post:
      security:
        - BasicAuth: []
        - hasRole: [admin]
      description: Create a new Job database
      consumes:
        - application/json
        - application/xml
        - text/plain
      produces:
        - application/json
        - application/xml
      tags:
        - Scheduler
      operationId: postJob
      parameters:
        - name: job
          in: body
          schema:
            $ref: "#/definitions/JobParameter"
      responses:
        "200":
          description: "Successful response, with new Adabas databases created"
          schema:
            $ref: "#/definitions/StatusResponse"
        "400":
          description: Environment evaluation error
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: Authorization error
        "403":
          description: Role access denied
        "404":
          description: Error creating Adabas database
          schema:
            $ref: "#/definitions/Error"
  /scheduler/jobs:
    get:
      security:
        - BasicAuth: []
        - hasRole: [admin]
      description: Retrieves a list of active job names known by Adabas Interface.
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      tags:
        - Scheduler
      operationId: getJobsIndex
      responses:
        "200":
          description: "Successful response, with list of known databases."
          schema:
            $ref: "#/definitions/JobsArray"
        "401":
          description: Authorization error
        "403":
          description: Role access denied
        "404":
          description: Database not available/unknown
  "/scheduler/job/{jobName}":
    get:
      security:
        - BasicAuth: []
        - hasRole: [admin]
      description: Retrieves a job definition
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      tags:
        - Scheduler
      operationId: getJob
      parameters:
        - type: string
          description: Job Name to be requested
          name: jobName
          in: path
          required: true
      responses:
        "200":
          description: "Successful response, with list of known databases."
          schema:
            $ref: "#/definitions/JobParameter"
        "400":
          description: Environment evaluation error
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: Authorization error
        "403":
          description: Role access denied
        "404":
          description: Database not available/unknown
          schema:
            $ref: "#/definitions/Error"
    put:
      security:
        - BasicAuth: []
        - hasRole: [admin]
      description: Schedule a already defined Job
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      tags:
        - Scheduler
      operationId: scheduleJob
      parameters:
        - type: string
          description: Job Name to be requested
          name: jobName
          in: path
          required: true
      responses:
        "200":
          description: "Successful response, with new Adabas databases created "
          schema:
            $ref: "#/definitions/JobStatusResponse"
        "400":
          description: Environment evaluation error
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: Authorization error
        "403":
          description: Role access denied
        "404":
          description: Error creating Adabas database
          schema:
            $ref: "#/definitions/Error"
    delete:
      security:
        - BasicAuth: []
        - hasRole: [admin]
      description: Delete a job definition
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - Scheduler
      operationId: deleteJob
      parameters:
        - type: string
          description: Job Name to be requested
          name: jobName
          in: path
          required: true
      responses:
        "200":
          description: Successfully delete the job.
          schema:
            $ref: "#/definitions/JobStatusResponse"
        "400":
          description: Environment evaluation error
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: Authorization error
        "403":
          description: Role access denied
        "404":
          description: Job not available/unknown
          schema:
            $ref: "#/definitions/Error"
  "/scheduler/jobs/{jobName}":
    get:
      security:
        - BasicAuth: []
        - hasRole: [admin]
      description: Retrieves a job definition
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      tags:
        - Scheduler
      operationId: getJobName
      parameters:
        - type: string
          description: Job Name to be requested
          name: jobName
          in: path
          required: true
      responses:
        "200":
          description: "Successful response, with list of known databases."
          schema:
            $ref: "#/definitions/JobParameter"
        "400":
          description: Environment evaluation error
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: Authorization error
        "403":
          description: Role access denied
        "404":
          description: Database not available/unknown
          schema:
            $ref: "#/definitions/Error"
    put:
      security:
        - BasicAuth: []
        - hasRole: [admin]
      description: Schedule a already defined Job
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      tags:
        - Scheduler
      operationId: scheduleJobs
      parameters:
        - type: string
          description: Job Name to be requested
          name: jobName
          in: path
          required: true
      responses:
        "200":
          description: "Successful response, with new Adabas databases created "
          schema:
            $ref: "#/definitions/JobStatusResponse"
        "400":
          description: Environment evaluation error
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: Authorization error
        "403":
          description: Role access denied
        "404":
          description: Error creating Adabas database
          schema:
            $ref: "#/definitions/Error"
    delete:
      security:
        - BasicAuth: []
        - hasRole: [admin]
      description: Delete a job definition
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - Scheduler
      operationId: deleteJobs
      parameters:
        - type: string
          description: Job Name to be requested
          name: jobName
          in: path
          required: true
      responses:
        "200":
          description: Successfully delete the job.
          schema:
            $ref: "#/definitions/JobStatusResponse"
        "400":
          description: Environment evaluation error
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: Authorization error
        "403":
          description: Role access denied
        "404":
          description: Job not available/unknown
          schema:
            $ref: "#/definitions/Error"
  "/scheduler/jobs/{jobName}/full":
    get:
      security:
        - BasicAuth: []
        - hasRole: [admin]
      description: Retrieves a full job definition
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      tags:
        - Scheduler
      operationId: getJobFull
      parameters:
        - type: string
          description: Job Name to be requested
          name: jobName
          in: path
          required: true
      responses:
        "200":
          description: "Successful response, with list of known databases."
          schema:
            $ref: "#/definitions/JobDefinition"
        "400":
          description: Environment evaluation error
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: Authorization error
        "403":
          description: Role access denied
        "404":
          description: Database not available/unknown
          schema:
            $ref: "#/definitions/Error"
  "/scheduler/job/{jobName}/full":
    get:
      security:
        - BasicAuth: []
        - hasRole: [admin]
      description: Retrieves a full job definition
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      tags:
        - Scheduler
      operationId: getJobFullInfo
      parameters:
        - type: string
          description: Job Name to be requested
          name: jobName
          in: path
          required: true
      responses:
        "200":
          description: "Successful response, with list of known databases."
          schema:
            $ref: "#/definitions/JobFull"
        "400":
          description: Environment evaluation error
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: Authorization error
        "403":
          description: Role access denied
        "404":
          description: Database not available/unknown
          schema:
            $ref: "#/definitions/Error"
  "/scheduler/jobs/{jobName}/result":
    get:
      security:
        - BasicAuth: []
        - hasRole: [admin]
      description: Retrieves all job results
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      tags:
        - Scheduler
      operationId: getJobResults
      parameters:
        - type: string
          description: Job name to be requested
          name: jobName
          in: path
          required: true
        - $ref: "#/parameters/rfc3339Param"
        - type: string
          description: Timestamp of first execution entry
          name: start_time
          in: query
        - type: string
          description: Timestamp of last execution entry
          name: end_time
          in: query
      responses:
        "200":
          description: "Successful response, with list of job name executions."
          schema:
            $ref: "#/definitions/JobResults"
        "400":
          description: Environment evaluation error
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: Authorization error
        "403":
          description: Role access denied
        "404":
          description: Database not available or unknown
          schema:
            $ref: "#/definitions/Error"
  "/scheduler/job/{jobName}/result/{jobId}":
    delete:
      security:
        - BasicAuth: []
        - hasRole: [admin]
      description: Delete a specific job result
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      tags:
        - Scheduler
      operationId: deleteJobResult
      parameters:
        - type: string
          description: Job name to be requested
          name: jobName
          in: path
          required: true
        - type: string
          description: Job id of execution result to be requested
          name: jobId
          in: path
          required: true
      responses:
        "200":
          description: "Successful response, job result is deleted."
          schema:
            $ref: "#/definitions/JobStatusResponse"
        "400":
          description: Environment evaluation error
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: Authorization error
        "403":
          description: Role access denied
        "404":
          description: Database not available/unknown
          schema:
            $ref: "#/definitions/Error"
  "/scheduler/jobs/{jobName}/result/{jobId}":
    get:
      security:
        - BasicAuth: []
        - hasRole: [admin]
      description: Retrieves a specific job result
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      tags:
        - Scheduler
      operationId: getJobResult
      parameters:
        - type: string
          description: Job name to be requested
          name: jobName
          in: path
          required: true
        - type: string
          description: Job id of execution result to be requested
          name: jobId
          in: path
          required: true
      responses:
        "200":
          description: "Successful response, with a specific job id."
          schema:
            $ref: "#/definitions/JobResult"
        "400":
          description: Environment evaluation error
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: Authorization error
        "403":
          description: Role access denied
        "404":
          description: Database not available/unknown
          schema:
            $ref: "#/definitions/Error"
    delete:
      security:
        - BasicAuth: []
        - hasRole: [admin]
      description: Delete a specific job result
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      tags:
        - Scheduler
      operationId: deleteJobsResult
      parameters:
        - type: string
          description: Job name to be requested
          name: jobName
          in: path
          required: true
        - type: string
          description: Job id of execution result to be requested
          name: jobId
          in: path
          required: true
      responses:
        "200":
          description: "Successful response, job result is deleted."
          schema:
            $ref: "#/definitions/JobStatusResponse"
        "400":
          description: Environment evaluation error
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: Authorization error
        "403":
          description: Role access denied
        "404":
          description: Database not available/unknown
          schema:
            $ref: "#/definitions/Error"
  "/scheduler/execution":
    get:
      security:
        - BasicAuth: []
        - hasRole: [admin]
      description: Retrieves a specific job result
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      tags:
        - Scheduler
      operationId: getJobExecutionResultRange
      parameters:
        - type: string
          description: Start time from
          name: from
          in: query
        - type: string
          description: End time to
          name: to
          in: query
        - type: string
          description: Timestamp of first job execution entry
          name: start_time
          in: query
        - type: string
          description: Timestamp of last job execution entry
          name: end_time
          in: query
      responses:
        "200":
          description: "Successful response, with a specific job id."
          schema:
            $ref: "#/definitions/JobResult"
        "400":
          description: Environment evaluation error
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: Authorization error
        "403":
          description: Role access denied
        "404":
          description: Database not available/unknown
          schema:
            $ref: "#/definitions/Error"
  "/scheduler/results":
    get:
      security:
        - BasicAuth: []
        - hasRole: [admin]
      description: Retrieves a specific job result
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      tags:
        - Scheduler
      operationId: getJobExecutionResult
      parameters:
        - type: string
          description: Start time from
          name: from
          in: query
        - type: string
          description: End time to
          name: to
          in: query
      responses:
        "200":
          description: "Successful response, with a specific job id."
          schema:
            $ref: "#/definitions/JobResult"
        "400":
          description: Environment evaluation error
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: Authorization error
        "403":
          description: Role access denied
        "404":
          description: Database not available/unknown
          schema:
            $ref: "#/definitions/Error"
  "/adabas/rest/access/{role}":
    get:
      summary: Retrieve current user list
      description: Retrieve the list of users who are allowed to access data
      operationId: access
      security:
        - BasicAuth: []
        - hasRole: [admin]
      tags:
        - Configuration
      parameters:
        - name: role
          in: path
          description: access role information for users or administrators
          required: true
          type: string
          enum:
            - User
            - user
            - USER
            - Administrator
            - administrator
            - ADMINISTRATOR
      responses:
        "200":
          description: "Successful response, with a specific job id."
          schema:
            $ref: "#/definitions/Users"
        "400":
          description: Environment evaluation error
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: Authorization error
        "403":
          description: Role access denied
        "404":
          description: Database not available/unknown
          schema:
            $ref: "#/definitions/Error"
    post:
      summary: Add new user in current user list
      description: Insert user in the list of users who are allowed to access data
      operationId: addAccess
      security:
        - BasicAuth: []
        - hasRole: [admin]
      tags:
        - Configuration
      parameters:
        - name: role
          in: path
          description: access role information for users or administrators
          required: true
          type: string
          enum:
            - User
            - user
            - USER
            - Administrator
            - administrator
            - ADMINISTRATOR
        - name: user
          in: query
          description: New user to be added
          required: true
          type: string
      responses:
        "200":
          description: "Successful response, with a added user."
        "400":
          description: Environment evaluation error
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: Authorization error
        "403":
          description: Role access denied
        "404":
          description: Database not available/unknown
          schema:
            $ref: "#/definitions/Error"
    delete:
      summary: Delete user of current user list
      description: Delete user in the list of users who are allowed to access data
      operationId: delAccess
      security:
        - BasicAuth: []
        - hasRole: [admin]
      tags:
        - Configuration
      parameters:
        - name: role
          in: path
          description: access role information for users or administrators
          required: true
          type: string
          enum:
            - User
            - user
            - USER
            - Administrator
            - administrator
            - ADMINISTRATOR
        - name: user
          in: query
          description: User to be deleted
          required: true
          type: string
      responses:
        "200":
          description: "Successful response, with a user deleted."
        "400":
          description: Environment evaluation error
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: Authorization error
        "403":
          description: Role access denied
        "404":
          description: Database not available/unknown
          schema:
            $ref: "#/definitions/Error"
  /redirect:
    get:
      security:
        - BasicAuth: []
        - hasRole: [admin]
      description: redirect to remote cluster entry
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      tags:
        - Proxy
      operationId: getProxyRedirect
      parameters:
        - name: name
          in: query
          description: destination node
          required: true
          type: string
        - name: x
          in: query
          description: destination path
          required: true
          type: string
      responses:
        "200":
          description: OK
        "400":
          description: Database error evaluating list
        "401":
          description: Authorization error
        "403":
          description: Role access denied
    put:
      security:
        - BasicAuth: []
        - hasRole: [admin]
      description: Store configuration
      consumes:
        - application/json
        - application/xml
        - text/plain
      produces:
        - application/json
        - application/xml
      tags:
        - Environment
      operationId: putProxyRedirect
      responses:
        "200":
          description: OK
        "400":
          description: Database error evaluating list
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: Authorization error
        "403":
          description: Role access denied
    post:
      security:
        - BasicAuth: []
        - hasRole: [admin]
      description: Store configuration
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      tags:
        - Environment
      operationId: postProxyRedirect
      responses:
        "200":
          description: OK
        "400":
          description: Database error evaluating list
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: Authorization error
        "403":
          description: Role access denied
definitions:
  Server:
    type: object
    properties:
      LogLocation:
        type: object
        properties:
          directory:
            type: string
          level:
            type: string
      Content:
        type: object
        properties:
          directory:
            type: string
      Service:
        type: array
        items:
          type: object
          properties:
            port:
              type: integer
            type:
              type: string
  ClassicAccess:
    type: object
    properties:
      Mapping:
        type: object
        properties:
          Directory:
            type: object
            properties:
              url:
                type: string
          ClassicGlobal:
            type: boolean
            x-omitempty: false
          ClassicAccess:
            type: array
            items:
              type: object
              properties:
                Database:
                  type: object
                  properties:
                    url:
                      type: string
  MappingConfig:
    type: object
    properties:
      Mapping:
        type: object
        properties:
          Repository:
            type: array
            items:
              type: object
              properties:
                Database:
                  type: object
                  properties:
                    url:
                      type: string
                    dbid:
                      type: integer
                    file:
                      type: integer
  Module:
    type: object
    properties:
      AdabasData:
        type: object
        properties:
          location:
            type: string
      Admin:
        type: array
        items:
          type: object
          properties:
            Installation:
              type: object
              properties:
                location:
                  type: string
      Directories:
        type: array
        items:
          type: object
          properties:
            Directory:
              type: object
              properties:
                location:
                  type: string
                name:
                  type: string
  Installation:
    type: array
    items:
      type: object
      properties:
        Environment:
          type: object
          properties:
            Location:
              type: string
            StructureLevel:
              type: integer
            Version:
              type: string
            Active:
              type: boolean
              x-omitempty: false
  Users:
    type: object
    properties:
      Users:
        type: array
        items:
          type: object
          properties:
            name:
              type: string
            readPermission:
              type: string
              x-omitempty: false
            writePermission:
              type: string
              x-omitempty: false
            administrator:
              type: boolean
              x-omitempty: false
      readPermission:
        type: string
        x-omitempty: false
      writePermission:
        type: string
        x-omitempty: false
  AuthorizationToken:
    type: object
    properties:
      token:
        type: string
      AdminRole:
        type: boolean
        x-omitempty: false
  principal:
    type: object
    properties:
      UUID:
        type: string
      name:
        type: string
      remote:
        type: string
      roles:
        type: array
        items:
          type: string
      session:
        type: object
      adabas:
        type: object
      passThrough:
        type: object
  ActivityStats:
    type: object
    properties:
      Statistics:
        type: object
        properties:
          BPHitRate:
            type: number
            x-omitempty: false
          BufferPoolIO:
            type: integer
            x-omitempty: false
          FPHitRate:
            type: integer
            x-omitempty: false
          PlogWrites:
            type: integer
            x-omitempty: false
          ThbDWPOverflow:
            type: integer
            x-omitempty: false
          ThbEtSync:
            type: integer
            x-omitempty: false
          ThbWaitIsn:
            type: integer
            x-omitempty: false
          ThbWaitUQContext:
            type: integer
            x-omitempty: false
          WPSpaceWaitCurrent:
            type: integer
            x-omitempty: false
          WorkReads:
            type: integer
            x-omitempty: false
          WorkWrites:
            type: integer
            x-omitempty: false
          WpSpaceWaitTotal:
            type: integer
            x-omitempty: false
  AdabasEnvironment:
    type: object
    properties:
      Environment:
        type: object
        properties:
          ADADATADIR:
            type: string
          EnvironmentList:
            type: array
            items:
              $ref: "#/definitions/AdabasInstallation"
  AdabasInstallation:
    type: object
    properties:
      ADAPROGDIR:
        type: string
      SAG:
        type: string
      StructureLevel:
        type: number
      Version:
        type: string
  BufferPoolStats:
    type: object
    properties:
      Statistics:
        type: object
        properties:
          AllocCurrent:
            type: integer
          AllocHighwater:
            type: integer
          AllocInternal:
            type: integer
          AllocWorkpool:
            type: integer
          FlushesFree:
            type: integer
            x-omitempty: false
          FlushesTotal:
            type: integer
            x-omitempty: false
          IOHitRateHigh:
            type: integer
            x-omitempty: false
          IOHitRateLow:
            type: integer
            x-omitempty: false
          IOLogicalReads:
            type: integer
            x-omitempty: false
          IOPhysicalWrites:
            type: integer
            x-omitempty: false
          IOPhysicalsReads:
            type: integer
            x-omitempty: false
          Modified:
            type: integer
            x-omitempty: false
          RabnsAsso:
            type: integer
            x-omitempty: false
          RabnsData:
            type: integer
            x-omitempty: false
          RabnsNucSort:
            type: integer
            x-omitempty: false
          RabnsNucTmp:
            type: integer
            x-omitempty: false
          RabnsWork:
            type: integer
            x-omitempty: false
          Size:
            type: integer
          WriteLimit:
            type: integer
  BufferFlushStats:
    type: object
    properties:
      Statistics:
        type: object
        properties:
          Flags:
            type: integer
          LStat:
            type: array
            items:
              $ref: "#/definitions/BfStats"
          Mem:
            type: integer
          FlushCounter:
            type: array
            items:
              type: integer
  BfStats:
    type: object
    properties:
      StartTime:
        type: string
        format: date-time
      DiffStartIO:
        type: integer
      DiffSyncFiles:
        type: integer
      DiffEndBf:
        type: integer
      NoEntries:
        type: integer
      FlushPagesSum:
        type: integer
      WriteLimit:
        type: integer
      ListEntryLockReject:
        type: integer
      Flag:
        type: integer
      SyncTimeIndex:
        type: integer
      SyncTimeData:
        type: integer
      SyncTimeJournal:
        type: integer
      NumBlocks:
        type: integer
      NumIOs:
        type: integer
  AdaMonStatsList:
    type: object
    properties:
      Statistics:
        type: array
        items: 
          $ref: "#/definitions/AdaMonEntry"
  AdaMonEntry:
    type: object
    properties:
      Target:
        type: string
      Monitor:
        $ref: "#/definitions/AdaMonStats"
  AdaMonStats:
    type: object
    properties:
      Statistics:
        type: object
        properties:
          AcmdCnt:
            type: integer
            x-omitempty: false
          RcmdCnt:
            type: integer
            x-omitempty: false
          RrecCnt:
            type: integer
            x-omitempty: false
          RrepCnt:
            type: integer
            x-omitempty: false
          AaioCnt:
            type: integer
            x-omitempty: false
          AdioCnt:
            type: integer
            x-omitempty: false
          AwioCnt:
            type: integer
            x-omitempty: false
          AtioCnt:
            type: integer
            x-omitempty: false
          ApioCnt:
            type: integer
            x-omitempty: false
          AthbCnt:
            type: integer
            x-omitempty: false
          AbflCnt:
            type: integer
            x-omitempty: false
          AbfrCnt:
            type: array
            items:
              type: integer
          AlbpCnt:
            type: integer
            x-omitempty: false
          ApbpCnt:
            type: integer
            x-omitempty: false
          Atiming:
              $ref: "#/definitions/IOTimings"
  IOTimings:
    type: object
    properties:
        Active:
          type: boolean
        Adcnt:
          type: integer
        Adsumdur:
          type: integer
        Arcnt:
          type: array
          items:
            type: integer
        Artmax:
          type: array
          items:
            type: integer
        Arsumdur:
          type: array
          items:
            type: integer
        Awcnt:
          type: array
          items:
            type: integer
        Awtmax:
          type: array
          items:
            type: integer
        Awsumdur:
          type: array
          items:
            type: integer
        Drcnt:
          type: array
          items:
            type: integer
        Drtmax:
          type: array
          items:
            type: integer
        Drsumdur:
          type: array
          items:
            type: integer
        Dwcnt:
          type: array
          items:
            type: integer
        Dwtmax:
          type: array
          items:
            type: integer
        Dwsumdur:
          type: array
          items:
            type: integer
        Wocnt:
          type: integer
        Wosumdur:
          type: integer
        Wrcnt:
          type: integer
        Wrtmax:
          type: integer
        Wrsumdur:
          type: integer
        Wwcnt:
          type: integer
        Wwtmax:
          type: integer
        Wwsumdur:
          type: integer
        Plcnt:
          type: integer
        Plsumdur:
          type: integer
        Prcnt:
          type: array
          items:
            type: integer
        Prtmax:
          type: array
          items:
            type: integer
        Prsumdur:
          type: array
          items:
            type: integer
        Pwcnt:
          type: array
          items:
            type: integer
        Pwtmax:
          type: array
          items:
            type: integer
        Pwsumdur:
          type: array
          items:
            type: integer
        Ixcnt:
          type: integer
        Ixsumdur:
          type: integer
        Sxcnt:
          type: integer
        Sxsumdur:
          type: integer
        Socnt:
          type: integer
        Sosumdur:
          type: integer
        Srcnt:
          type: array
          items:
            type: integer
        Srtmax:
          type: array
          items:
            type: integer
        Srsumdur:
          type: array
          items:
            type: integer
        Swcnt:
          type: array
          items:
            type: integer
        Swtmax:
          type: array
          items:
            type: integer
        Swsumdur:
          type: array
          items:
            type: integer
        Trcnt:
          type: array
          items:
            type: integer
        Trtmax:
          type: array
          items:
            type: integer
        Trsumdur:
          type: array
          items:
            type: integer
        Twcnt:
          type: array
          items:
            type: integer
        Twtmax:
          type: array
          items:
            type: integer
        Twsumdur:
          type: array
          items:
            type: integer
  Checkpoint:
    type: object
    properties:
      Date:
        type: string
      Details:
        type: string
      Name:
        type: string
      Session:
        type: integer
  CommandItems:
    type: object
    required:
      - CommandCount
      - CommandName
    properties:
      CommandCount:
        type: integer
        x-isnullable: false
      CommandName:
        type: string
        x-isnullable: false
  CommandQueue:
    type: object
    properties:
      CommandQueue:
        type: object
        properties:
          Commands:
            type: array
            items:
              $ref: "#/definitions/CommandQueueEntry"
      NumberCQEntriesInUse:
        type: integer
      NumberCQEntriesShown:
        type: integer
  CommandQueueEntry:
    type: object
    properties:
      APU:
        type: integer
        x-omitempty: false
      CommId:
        type: integer
      CommandCode:
        type: string
      CommandUser:
        type: string
      Status:
        type: string
        x-omitempty: false
      File:
        type: integer
        x-omitempty: false
      Isn:
        type: integer
        x-omitempty: false
      User:
        $ref: "#/definitions/UserInformation"
  CommandStats:
    type: object
    properties:
      CommandStats:
        type: object
        properties:
          Commands:
            type: array
            items:
              $ref: "#/definitions/CommandItems"
  Container:
    type: object
    properties:
      BlockSize:
        type: string
      ContainerSize:
        type: string
      Path:
        type: string
  ContainerFst:
    type: object
    properties:
      Container:
        type: object
        properties:
          ContainerList:
            type: array
            items:
              $ref: "#/definitions/ContainerInfo"
          FreeSpaceTable:
            type: array
            items:
              $ref: "#/definitions/FreeSpaceTable"
  ContainerInfo:
    type: object
    properties:
      BlockSize:
        type: integer
      BlockUnit:
        type: string
      ContainerNumber:
        type: integer
      DeviceType:
        type: string
      FirstExtentRabn:
        type: integer
      FirstUnusedRabn:
        type: integer
      LastExtentRabn:
        type: integer
      Path:
        type: string
      Size:
        type: integer
        x-isnullable: false
        x-omitempty: false
      SizeUnit:
        type: string
      Type:
        type: string
  Data:
    type: object
  DataVersions:
    type: object
    properties:
      Version:
        description: Core component version
        type: string
  Database:
    properties:
      CheckpointFile:
        type: integer
      ContainerList:
        type: array
        items:
          $ref: "#/definitions/Container"
      Dbid:
        type: integer
      LoadDemo:
        type: boolean
      Name:
        type: string
      SecurityFile:
        type: integer
      UserFile:
        type: integer
  DatabaseCheckpoints:
    type: object
    properties:
      Checkpoints:
        type: array
        items:
          $ref: "#/definitions/Checkpoint"
  DatabaseGcb:
    type: object
    properties:
      Gcb:
        type: object
        properties:
          ACRABNLength:
            type: integer
          ASSO1BlockSize:
            type: integer
          AlphaEncoding:
            type: integer
          Architecture:
            type: string
          CheckpointFile:
            type: integer
          CurrentCLOGNumber:
            type: integer
          CurrentPLOGNumber:
            type: integer
          Date:
            type: string
            format: date-time
          Dbid:
            type: integer
          ETDataFile:
            type: integer
          ExtentRABNASSOArray:
            type: array
            items:
              type: integer
          ExtentRABNDATAArray:
            type: array
            items:
              type: integer
          ExtentRABNDSSTArray:
            type: array
            items:
              type: integer
          Flags:
            type: string
          MaxFileNumber:
            type: integer
          MaxFileNumberLoaded:
            type: integer
          Name:
            type: string
          PLOGCount:
            type: integer
          PLOGExtent:
            type: integer
          RBACSystemFile:
            type: integer
          ReplicationCommandFile:
            type: integer
          ReplicationMetadataFile:
            type: integer
          ReplicationTransitionFile:
            type: integer
          SecurityFile:
            type: integer
          StructureLevel:
            type: string
          TimeStampLog:
            type: string
            format: date-time
          TimeStampReplication:
            type: string
            format: date-time
          WORKExtents:
            type: array
            items:
              $ref: "#/definitions/WORKExtents"
          WORKPart1Size:
            type: integer
          WideEncoding:
            type: integer
  DatabaseInformation:
    properties:
      Active:
        type: boolean
        x-omitempty: false
      Dbid:
        type: integer
      Name:
        type: string
      ServiceVersion:
        type: string
      StructureLevel:
        type: integer
      Version:
        type: string
      Location:
        type: string
  DatabaseStatus:
    properties:
      Database:
        type: object
        properties:
          Dbid:
            type: string
          Status:
            type: string
  Databases:
    description: Database entry in database list
    type: object
    properties:
      Database:
        type: array
        items:
          $ref: "#/definitions/DatabaseInformation"
  DbFiles:
    type: object
    title: Files
    properties:
      Files:
        type: array
        items:
          type: integer
  Directories:
    type: object
    properties:
      Directories:
        type: array
        items:
          $ref: "#/definitions/Directory"
      system:
        type: string
  Directory:
    type: object
    properties:
      Location:
        type: string
      Name:
        type: string
  Environments:
    type: object
    properties:
      Environment:
        type: object
  Error:
    type: object
    properties:
      Error:
        type: object
        properties:
          code:
            type: string
          message:
            type: string
  Executions:
    type: object
    properties:
      Database:
        type: integer
      Ended:
        type: string
        format: date-time
      ExitCode:
        type: number
        x-omitempty: false
      Id:
        type: integer
      Log:
        type: string
      StartedBy:
        type: string
      Scheduled:
        type: string
        format: date-time
  Fcb:
    type: object
    properties:
      File:
        type: object
        properties:
          ACextentsUsed:
            type: integer
            x-omitempty: false
          ACextents:
            type: array
            items:
              $ref: "#/definitions/FcbExtents"
          AdamByteKeys:
            type: array
            items:
              type: integer
          AdamDsBlocks:
            type: integer
            x-omitempty: false
          AdamKey:
            type: string
          AdamParams:
            type: integer
            x-omitempty: false
          AlphaEncoding:
            type: integer
            x-omitempty: false
          DSextentsUsed:
            type: integer
            x-omitempty: false
          DSextents:
            type: array
            items:
              $ref: "#/definitions/FcbExtents"
          FDTOffsetAdam:
            type: integer
            x-omitempty: false
          FdtLength:
            type: integer
            x-omitempty: false
          FdtStartRABN:
            type: integer
            x-omitempty: false
          FirstRABNNiIndexReusage:
            type: integer
            x-omitempty: false
          FirstRABNUiIndexReusage:
            type: integer
            x-omitempty: false
          Flags:
            type: string
            x-omitempty: false
          HIRabn:
            type: integer
            x-omitempty: false
          HighestIndexLevel:
            type: integer
            x-omitempty: false
          IsnCnt:
            type: integer
            x-omitempty: false
          LastDsExtendIndex:
            type: integer
            x-omitempty: false
          LastModification:
            type: string
          LastNiExtendIndex:
            type: integer
            x-omitempty: false
          LastUiExtendIndex:
            type: integer
            x-omitempty: false
          LastUsedDataRABN:
            type: integer
            x-omitempty: false
          LobFile:
            type: integer
            x-omitempty: false
          LowIsn:
            type: integer
            x-omitempty: false
          MaxHyperIsn:
            type: integer
            x-omitempty: false
          MaxIsn:
            type: integer
            x-omitempty: false
          MaxMuOccurence:
            type: integer
            x-omitempty: false
          MaxRecordLength:
            type: integer
            x-omitempty: false
          NIRabn:
            type: integer
            x-omitempty: false
          NIextentsUsed:
            type: integer
            x-omitempty: false
          NIextents:
            type: array
            items:
              $ref: "#/definitions/FcbExtents"
          Name:
            type: string
          Number:
            type: integer
            x-omitempty: false
          Owner:
            type: string
          PaddingFactorAsso:
            type: integer
            x-omitempty: false
          PaddingFactorData:
            type: integer
            x-omitempty: false
          RecordCount:
            type: integer
            x-omitempty: false
          ResidualCountDSST:
            type: integer
            x-omitempty: false
          RootFile:
            type: integer
            x-omitempty: false
          RotatingIsn:
            type: integer
            x-omitempty: false
          RotatingRabnDSST:
            type: integer
            x-omitempty: false
          SecurityInfo:
            type: integer
            x-omitempty: false
          StructureLevel:
            type: integer
            x-omitempty: false
          TopIsn:
            type: integer
            x-omitempty: false
          TotalAcBlocks:
            type: integer
            x-omitempty: false
          TotalDsBlocks:
            type: integer
            x-omitempty: false
          TotalNiBlocks:
            type: integer
            x-omitempty: false
          TotalUiBlocks:
            type: integer
            x-omitempty: false
          UIRabn:
            type: integer
            x-omitempty: false
          UIextentsUsed:
            type: integer
            x-omitempty: false
          UIextents:
            type: array
            items:
              $ref: "#/definitions/FcbExtents"
  FcbExtents:
    type: object
    properties:
      FirstRabn:
        type: integer
        x-omitempty: false
      FreeOrIsn:
        type: integer
        x-omitempty: false
      LastRabn:
        type: integer
        x-omitempty: false
      LenOrIsns:
        type: integer
        x-omitempty: false
      ShiftCount:
        type: integer
        x-omitempty: false
  Fdt:
    type: object
    properties:
      FDT:
        type: object
        properties:
          Descriptors:
            type: array
            items:
              $ref: "#/definitions/Field"
          Fields:
            type: array
            items:
              $ref: "#/definitions/Field"
          Referentials:
            type: array
            items:
              $ref: "#/definitions/Field"
          Time:
            type: string
            # format: date-time
  FduFdt:
    type: object
    required:
      - fduOptions
      - fdtDefinition
    properties:
      fdtDefinition:
        type: string
      fduOptions:
        type: object
        properties:
          fduACrabn:
            type: integer
          fduAdamByteKey:
            type: string
          fduAdamDsBlocks:
            type: integer
          fduAdamKey:
            type: integer
          fduAdamOffset:
            type: integer
          fduAssoPfac:
            type: integer
          fduBlocksizeAC:
            type: integer
          fduBlocksizeDS:
            type: integer
          fduBlocksizeNI:
            type: integer
          fduBlocksizeUI:
            type: integer
          fduCipher:
            type: integer
          fduContiguous:
            type: integer
          fduDSMUnitDS:
            type: integer
          fduDSMUnitNI:
            type: integer
          fduDSMUnitNILong:
            type: integer
          fduDSMUnitUI:
            type: integer
          fduDSMUnitUILong:
            type: integer
          fduDSRabn:
            type: integer
          fduDSSize:
            type: integer
          fduDataPfac:
            type: integer
          fduErase:
            type: integer
          fduIsnSize:
            type: integer
          fduLobFile:
            type: integer
          fduLobFileOption:
            type: integer
          fduMaxRecordLength:
            type: integer
          fduNISize:
            type: integer
          fduName:
            type: string
          fduNiBlocksize:
            type: integer
          fduNiLongRabn:
            type: integer
          fduNiLongSize:
            type: integer
          fduNiRabn:
            type: integer
          fduNoDsst:
            type: integer
          fduNobt:
            type: integer
          fduOverflowAdam:
            type: integer
          fduPGMRefresh:
            type: integer
          fduParamAdam:
            type: integer
          fduReuse:
            type: integer
          fduSystemFileMaxMu:
            type: integer
          fduUIRabn:
            type: integer
          fduUISize:
            type: integer
          fduUiBlocksize:
            type: integer
          fduUiLongRabn:
            type: integer
          fduUiLongSize:
            type: integer
      fileNumber:
        type: integer
      maxIsn:
        type: integer
  Field:
    type: object
    properties:
      Flags:
        type: string
        x-omitempty: false
      Format:
        type: string
        x-omitempty: false
      Length:
        type: integer
        x-omitempty: false
      Level:
        type: integer
      Name:
        type: string
      SubFields:
        type: array
        items:
          $ref: "#/definitions/SubField"
        x-nullable: true
      Type:
        type: string
      CollationAttribute:
        type: string
      CollationParent:
        type: string
      ForeignField:
        type: string
      ReferentialFile:
        type: integer
      PrimaryField:
        type: string
      ReferentialType:
        type: string
  File:
    type: object
    properties:
      Created:
        type: string
        format: data-time
      Modified:
        type: string
        format: date-time
      Name:
        type: string
      Size:
        type: integer
      Type:
        type: string
  FileInfo:
    type: object
    properties:
      FileNr:
        type: integer
        x-omitempty: false
      IsLob:
        type: integer
      IsLobRoot:
        type: integer
      Type:
        type: string
      Name:
        type: string
      RecordCount:
        type: integer
        x-omitempty: false
      Status:
        type: string
  FileLocation:
    type: object
    properties:
      Content:
        type: array
        items:
          $ref: "#/definitions/File"
      Location:
        type: string
      Reference:
        type: string
      system:
        type: string
  Files:
    type: object
    properties:
      Files:
        type: array
        items:
          $ref: "#/definitions/FileInfo"
  FreeSpaceTable:
    type: object
    properties:
      BlockSize:
        type: integer
      FirstRABN:
        type: integer
      LastRABN:
        type: integer
      Type:
        type: string
  HWM:
    type: object
    properties:
      HighWater:
        type: object
        properties:
          APU:
            type: object
            properties:
              Size:
                type: number
              APUs:
                type: array
                items:
                  $ref: "#/definitions/APU"
          AttachedBufferHighWaterMark:
            $ref: "#/definitions/HighWaterEntries"
          AttachedBufferSize:
            type: integer
          APUHighWaterMark:
            $ref: "#/definitions/HighWaterEntries"
          APUSize:
            type: integer
          BufferpoolHighWaterMark:
            $ref: "#/definitions/HighWaterEntries"
          BufferpoolSize:
            type: integer
          ClientQueueHighWaterMark:
            $ref: "#/definitions/HighWaterEntries"
          ClientQueueSize:
            type: integer
          CommandQueueHighWaterMark:
            $ref: "#/definitions/HighWaterEntries"
          CommandQueueSize:
            type: integer
          ComplexSearchHighWaterMark:
            $ref: "#/definitions/HighWaterEntries"
          GroupCommitHighWaterMark:
            $ref: "#/definitions/HighWaterEntries"
          GroupCommitSize:
            type: integer
          HQUserLimitHighWaterMark:
            $ref: "#/definitions/HighWaterEntries"
          HQUserLimitSize:
            type: integer
          HoldQueueHighWaterMark:
            $ref: "#/definitions/HighWaterEntries"
          HoldQueueSize:
            type: integer
          IsnSortHighWaterMark:
            $ref: "#/definitions/HighWaterEntries"
          LABXHighWaterMark:
            $ref: "#/definitions/HighWaterEntries"
          LABXSize:
            type: integer
          LPXAHighWaterMark:
            $ref: "#/definitions/HighWaterEntries"
          LPXASize:
            type: integer
          LWOHighWaterMark:
            $ref: "#/definitions/HighWaterEntries"
          LWOSize:
            type: integer
          NucleusStartTime:
            type: string
            format: date-time
          ProtectionAreaActiveHighWaterMark:
            $ref: "#/definitions/HighWaterEntries"
          ProtectionAreaActiveSize:
            type: integer
          ProtectionAreaSize:
            type: integer
          SortAreaSize:
            type: integer
          ThreadSize:
            type: integer
          ThreadsHighWaterMark:
            $ref: "#/definitions/HighWaterEntries"
          TransactionTimeHighWaterMark:
            $ref: "#/definitions/HighWaterEntries"
          TransactionTimeSize:
            type: integer
          UserQueueHighWaterMark:
            $ref: "#/definitions/HighWaterEntries"
          UserQueueSize:
            type: integer
          WorkpoolHighWaterMark:
            $ref: "#/definitions/HighWaterEntries"
          WorkpoolSize:
            type: integer
  Handler:
    type: object
    properties:
      Name:
        type: string
      Version:
        type: string
  APU:
    type: object
    properties:
      Name:
        type: string
      HighWater:
        $ref: "#/definitions/HighWaterEntries"      
  HighWaterEntries:
    type: object
    required:
      - inuse
      - high
      - time
    properties:
      high:
        type: integer
        x-isnullable: false
      inuse:
        type: integer
        x-isnullable: false
      time:
        type: string
        format: date-time
        x-isnullable: false
  HoldQueue:
    type: object
    properties:
      HoldQueue:
        type: array
        items:
          $ref: "#/definitions/HoldQueueEntry"
  HoldQueueEntry:
    type: object
    properties:
      File:
        type: integer
      Flags:
        type: string
      Hid:
        type: array
        items:
          $ref: "#/definitions/UserInformation"
      HqCommid:
        type: integer
      Isn:
        type: integer
      Locks:
        type: string
      User:
        type: string
  Job:
    type: object
    properties:
      Description:
        type: string
      Environments:
        type: array
        items:
          type: object
          properties:
            Parameter:
              type: string
      Name:
        type: string
      Parameters:
        type: array
        items:
          type: object
          properties:
            Parameter:
              type: string
      Script:
        type: string
      User:
        type: string
      Utility:
        type: string
  JobInformation:
    type: object
    properties:
      Job:
        $ref: "#/definitions/JobShortDescription"
      Status:
        type: string
  JobDefinition:
    type: object
    properties:
      Executions:
        type: array
        items:
          $ref: "#/definitions/Executions"
      Job:
        $ref: "#/definitions/Job"
      Status:
        type: string
  JobFull:
    type: object
    properties:
      Job:
        $ref: "#/definitions/JobDefinition"
  JobDescription:
    type: object
    properties:
      CronSchedule:
        type: string
      Description:
        type: string
      Environments:
        type: array
        items:
          type: object
          properties:
            Parameter:
              type: string
      Name:
        type: string
      Parameters:
        type: array
        items:
          type: object
          properties:
            Parameter:
              type: string
      Script:
        type: string
      User:
        type: string
      Utility:
        type: string
  JobShortParameter:
    type: object
    properties:
      Job:
        $ref: "#/definitions/JobShortDescription"
  JobShortDescription:
    type: object
    properties:
      CronSchedule:
        type: string
      Description:
        type: string
      Name:
        type: string
      User:
        type: string
      Utility:
        type: string
  JobParameter:
    type: object
    properties:
      Job:
        $ref: "#/definitions/JobDescription"
  JobResults:
    type: object
    properties:
      JobResults:
        type: array
        items:
          $ref: "#/definitions/JobResult"       
  JobResult:
    type: object
    properties:
      JobResult:
        type: object
        properties:
          Description:
            type: string
          Ended:
            type: string
            format: date-time
          ExitCode:
            type: number
            x-omitempty: false
          Id:
            type: number
          Log:
            type: string
          Name:
            type: string
          Scheduled:
            type: string
            format: date-time
          StartedBy:
            type: string
          Status:
            type: string
  JobStatusResponse:
    type: object
    properties:
      Status:
        type: object
        properties:
          Action:
            type: string
          ExecutionId:
            type: integer
          Message:
            type: string
          Name:
            type: string
  JobsArray:
    type: object
    properties:
      JobDefinition:
        type: array
        items:
          $ref: "#/definitions/JobInformation"
  JobsList:
    type: object
    properties:
      JobDefinition:
        type: array
        items:
          $ref: "#/definitions/JobDefinition"
  Map:
    type: string
  Maps:
    description: Maps definition
    type: object
    properties:
      Maps:
        type: array
        items:
          $ref: "#/definitions/Map"
  MapField:
    type: object
    properties:
      name:
        type: string
        properties:
          format:
            type: string
            xml:
              attribute: true
      shortName:
        type: string
        properties:
          format:
            type: string
            xml:
              attribute: true
      contentType:
        type: string
        properties:
          format:
            type: string
            xml:
              attribute: true
      charset:
        type: string
        properties:
          format:
            type: string
            xml:
              attribute: true
      file:
        type: integer
        properties:
          format:
            type: integer
            xml:
              attribute: true
      formatType:
        type: string
        properties:
          format:
            type: string
            xml:
              attribute: true
      length:
        type: integer
        properties:
          format:
            type: integer
            xml:
              attribute: true
      fieldType:
        type: string
        properties:
          format:
            type: string
            xml:
              attribute: true
  mappingLocation:
    type: object
    properties:
      target:
        type: string
      file:
        type: integer
  mapping:
    type: object
    properties:
      Map:
        type: object
        properties:
          name:
            type: string
          lastModified:
            type: string
            format: date-time
          isn:
            type: integer
          definition:
            $ref: "#/definitions/mappingLocation"
          data:
            $ref: "#/definitions/mappingLocation"
          fields:
            type: array
            items:
              $ref: "#/definitions/MapField"
      format:
        xml:
          namespace: http://www.softwareag.com/adabas/map
          prefix: map
  NucleusLog:
    type: object
    properties:
      Log:
        type: object
        properties:
          Log:
            type: string
  OnlineDatabase:
    type: object
    properties:
      url:
        type: string
  OnlineDatabases:
    description: Databases definition
    type: object
    properties:
      Databases:
        type: array
        items:
          $ref: "#/definitions/OnlineDatabase"
  Parameter:
    type: object
    properties:
      Parameter:
        type: object
        required:
          - AR
          - BI
          - CLOGLAYOUT
          - PLOG
          - LPXA
          - BFIO
          - CLOGBMAX
          - LOGGING
          - NCL
          - NISNHQ
          - NT
          - NU
          - OPTIONS
          - TNAA
          - TNAE
          - TNAX
          - TT
          - USEREXITS
          - RPL_RECORDS
          - RPL_BLOCKS
          - RPL_TOTAL
          - WRITE_LIMIT
          - LAB
          - LABX
          - LBP
          - LWP
          - APU_UNITS
          - APU_WORKERS
          - APU_RECVS
          - SSLPORT
          - SSLCADIRECTORY
          - SSLCAFILE
        properties:
          ADATCP:
            type: string
            x-isnullable: false
          ADATCPATB:
            type: integer
            x-isnullable: false
          ADATCPCONNECTIONS:
            type: integer
            x-isnullable: false
          ADATCPPORT:
            type: integer
            x-isnullable: false
          ADATCPRECEIVER:
            type: integer
            x-isnullable: false
          APU_RECVS:
            type: integer
            x-isnullable: false
          APU_UNITS:
            type: integer
            x-isnullable: false
          APU_WORKERS:
            type: integer
            x-isnullable: false
          AR:
            type: string
            x-isnullable: false
          BFIO:
            type: integer
            x-isnullable: false
          BI:
            type: string
            x-isnullable: false
          CLOGBMAX:
            type: integer
            x-isnullable: false
          CLOGLAYOUT:
            type: integer
            x-isnullable: false
          LAB:
            type: integer
            x-isnullable: false
          LABX:
            type: integer
            x-isnullable: false
          LBP:
            type: integer
            x-isnullable: false
          LOGGING:
            type: string
            x-isnullable: false
          LPXA:
            type: integer
            x-isnullable: false
          LWP:
            type: integer
            x-isnullable: false
          NCL:
            type: integer
            x-isnullable: false
          NISNHQ:
            type: integer
            x-isnullable: false
          NT:
            type: integer
            x-isnullable: false
          NU:
            type: integer
            x-isnullable: false
          OPTIONS:
            type: string
            x-isnullable: false
          PLOG:
            type: string
            x-isnullable: false
          RPL_BLOCKS:
            type: integer
            x-isnullable: false
          RPL_RECORDS:
            type: integer
            x-isnullable: false
          RPL_TOTAL:
            type: integer
            x-isnullable: false
          SSLPORT:
            type: integer
            x-isnullable: false
          SSLCERTFILE:
            type: string
            x-isnullable: false
          SSLKEYFILE:
            type: string
            x-isnullable: false
          SSLVERIFY:
            type: integer
            x-isnullable: false
          SSLCAFILE:
            type: string
            x-isnullable: false
          SSLCADIRECTORY:
            type: string
            x-isnullable: false
          SSLPASSWORD:
            type: string
            x-isnullable: false
          TNAA:
            type: integer
            x-isnullable: false
          TNAE:
            type: integer
            x-isnullable: false
          TNAX:
            type: integer
            x-isnullable: false
          TT:
            type: integer
            x-isnullable: false
          USEREXITS:
            type: string
            x-isnullable: false
          WRITE_LIMIT:
            type: integer
            x-isnullable: false
  ParameterInfo:
    type: object
    properties:
      Acronym:
        type: string
      DefaultValue:
        type: string
      Description:
        type: string
      ErrorCode:
        type: integer
        x-omitempty: false
      InifileValue:
        type: string
      IsDynamic:
        type: boolean
        x-omitempty: false
      IsMaxValueAvailable:
        type: boolean
        default: false
        x-omitempty: false
      IsMinValueAvailable:
        type: boolean
        default: false
        x-omitempty: false
      IsOnlineValueAvailable:
        type: boolean
        x-omitempty: false
      MaxValue:
        type: integer
        x-omitempty: false
      MinValue:
        type: integer
        x-omitempty: false
      Name:
        type: string
      OnlineValue:
        type: string
  ParameterInfos:
    type: object
    properties:
      ParameterInfo:
        type: object
        properties:
          Parameter:
            type: array
            items:
              $ref: "#/definitions/ParameterInfo"
  Records:
    type: object
    properties:
      Store:
        type: object
      Records:
        type: object
  Response:
    type: object
    properties:
      MapName:
        type: string
      FileRecords:
        type: integer
        x-omitempty: false
      NrRecords:
        type: integer
        x-omitempty: false
      FieldNames:
        type: array
        items:
          type: string
      Records:
        type: array
        items:
          type: object
    #       $ref: '#/definitions/Data'
    #     properties:
    #       ISN:
    #         type: integer
    #         xml:
    #           attribute: true
  StoreResponse:
    type: object
    properties:
      NrStored:
        type: integer
      Stored:
        type: array
        items:
          type: integer
  PLOG:
    type: object
    properties:
      PLOG:
        type: object
        properties:
          Time:
            type: string
            format: date-time
          Duration:
            type: string
          UsedSpace:
            type: integer
          TotalSpace:
            type: integer
          SectorSize:
            type: integer
          LogNr:
            type: integer
          EnvironmentCount:
            type: integer
          ExtensionNr:
            type: integer
          DeviceCount:
            type: integer
          Flags:
            type: string
          UEX2:
            type: string
          Device:
            type: string
          CurrentName:
            type: string
  TCP:
    type: object
    properties:
      Entry:
        type: array
        items:
          $ref: "#/definitions/TCPentry"
  TCPentry:
    type: object
    properties:
      ID:
        type: integer
        x-omitempty: false
      RecvID:
        type: integer
        x-omitempty: false
      RemoteUser:
        type: string
      RemoteHost:
        type: string
      RemoteIP:
        type: string
      RemotePort:
        type: integer
        x-omitempty: false
  Info:
    type: object
    properties:
      Info:
        type: string
  Status:
    type: object
    properties:
      Message:
        type: string
  StatusResponse:
    type: object
    properties:
      Status:
        type: object
        properties:
          Action:
            type: string
          Code:
            type: string
          Target:
            type: string
          Message:
            type: string
  SubField:
    type: object
    properties:
      From:
        type: integer
      SubName:
        type: string
      To:
        type: integer
  Thread:
    type: object
    properties:
      APU:
        type: integer
        x-omitempty: false
      CommandCode:
        type: string
      CommandCount:
        type: integer
        x-omitempty: false
      File:
        type: integer
        x-omitempty: false
      Status:
        type: string
      Thread:
        type: integer
        x-omitempty: false
  ThreadTable:
    type: object
    properties:
      Threads:
        type: array
        items:
          $ref: "#/definitions/Thread"
  UCB:
    type: object
    properties:
      UCB:
        type: object
        properties:
          EntryCount:
            type: integer
          UCB:
            type: array
            items:
              $ref: "#/definitions/UCBEntry"
  UCBEntry:
    type: object
    properties:
      Count:
        type: integer
      DBMode:
        type: string
      Date:
        type: string
        format: date-time
      Id:
        type: string
      Sequence:
        type: integer
      ucbFiles:
        type: array
        items:
          type: object
          properties:
            UcbFile:
              type: integer
  UserInformation:
    type: object
    properties:
      Id:
        type: integer
      Node:
        type: string
      Terminal:
        type: string
      Timestamp:
        type: string
        format: date-time
  UserQueue:
    type: object
    properties:
      UserQueue:
        type: object
        properties:
          UserQueueEntry:
            type: array
            items:
              $ref: "#/definitions/UserQueueEntry"
  UserQueueDetail:
    type: object
    properties:
      UserQueueDetails:
        type: object
        properties:
          CommandCount:
            type: integer
            x-omitempty: false
          ISN_Hold:
            type: integer
            x-omitempty: false
          ISN_Lists:
            type: integer
            x-omitempty: false
          LastActivity:
            type: string
            format: date-time
          StartSession:
            type: string
            format: date-time
          StartTransaction:
            type: string
            format: date-time
          TNALimit:
            type: integer
            x-omitempty: false
          TTLimit:
            type: integer
            x-omitempty: false
          TransactionCount:
            type: integer
            x-omitempty: false
          UserEncoding:
            type: integer
          DetailEntry:
            $ref: "#/definitions/UserQueueEntry"
      files:
        type: array
        items:
          type: integer
  UserQueueEntry:
    type: object
    properties:
      EtFlags:
        type: string
      Flags:
        type: string
      Uid:
        $ref: "#/definitions/UserInformation"
      UqId:
        type: integer
      User:
        type: string
  Versions:
    type: object
    properties:
      Handler:
        type: array
        items:
          $ref: "#/definitions/Handler"
      Product:
        type: string
      Version:
        type: string
  WORKExtents:
    type: object
    properties:
      BlockSize:
        type: integer
      DeviceType:
        type: string
      Id:
        type: string
      Number:
        type: integer
      RABNfirst:
        type: integer
      RABNlast:
        type: integer
      RABNunused:
        type: integer
  Fields:
    type: array
    items:
      $ref: "#/definitions/FieldItem"
  FieldItem:
    type: object
    properties:
      level:
        type: integer
      value:
        type: string
      format:
        type: string
      length:
        type: integer
      options:
        type: string
      identifier:
        type: string
      label:
        type: string
  Config:
    type: object
    properties:
      StructureLevel:
        type: integer
      Version:
        type: string
      Server:
        type: object
        properties:
          Service:
            type: array
            items:
              type: object
              properties:
                port:
                  type: number
                type:
                  type: string
          LogLocation:
            type: object
            properties:
              directory:
                type: string
              level:
                type: string
          Content:
            type: string
      JobStore:
        $ref: "#/definitions/JobStore"
      Cluster:
        $ref: "#/definitions/ClusterConfig"
      Mapping:
        type: object
        properties:
          Directory:
            type: string
          Database:
            type: array
            items:
              $ref: "#/definitions/DatabaseConfig"
      DatabaseAccess:
        type: object
        properties:
          Global:
            type: boolean
            x-omitempty: false
          Database:
            type: array
            items:
              $ref: "#/definitions/DatabaseConfig"
      Module:
        type: object
        properties:
          AdabasData:
            type: string
          Installation:
            type: array
            items: 
              type: object
              properties:
                Location:
                  type: string
                Version:
                  type: string
                StructureLevel:
                  type: integer
                Active:
                  type: boolean
                  x-omitempty: false
          Directories:
            type: array
            items: 
              type: object
              properties:
                name:
                  type: string
                location:
                  type: string
      Metrics:
        type: object
        properties:
          Database:
            type: array
            items:
              $ref: "#/definitions/DatabaseConfig"
  JobStore:
    type: object
    properties:
      config:
        type: string
      Database:
        $ref: "#/definitions/DatabaseConfig"
  DatabaseConfig:
    type: object
    properties:
      url:
        type: string
      file:
        type: number
      changed:
        type: boolean
        default: false
      deleted:
        type: boolean
        default: false
  ClusterConfig:
    type: object
    properties:
      Nodes:
        type: array
        items:
          type: object
          properties:           
            Name:
              type: string
            Web:
              type: string
            Group:
              type: string
  Cluster:
    type: object
    properties:
      View:
        type: object
        properties:
          StateID:
            $ref: "#/definitions/ClusterGtid"
          LastCommitted:
            $ref: "#/definitions/ClusterGtid"
          Status:
            type: string
          Updated:
            type: number
            x-omitempty: false
          NumberOfMembers:
            type: number
            x-omitempty: false
          IndexOfNode:
            type: number
            x-omitempty: false
          IndexOfPrimaryNode:
            type: number
            x-omitempty: false
          LocalSendQueue:
            type: number
            x-omitempty: false
          LocalSendQueueMax:
            type: number
          LocalRecvQueue:
            type: number
            x-omitempty: false
          LocalRecvQueueMax:
            type: number
      Members:
        type: array
        items:
          $ref: "#/definitions/ClusterMember"
  ClusterGtid:
    type: object
    properties: 
      StateID:
        type: string
      SeqNo:
        type: number
        x-omitempty: false
  ClusterMember:
    type: object
    properties: 
      BaseId:
        type: string
      BaseName:
        type: string
      BaseIncoming:
        type: string
      LastCommitted:
        type: number
        x-omitempty: false
      Status:
        type: string      
parameters:
  mapParam:
    type: string
    description: Map definition name
    name: name
    in: path
    required: true
  dbidParam:
    type: number
    description: Database ID
    name: dbid
    in: path
    required: true
  targetParam:
    type: string
    description: Database ID or ADATCP or ADATCPS short reference like adatcp:<host>:<port>
    name: dbid
    in: path
    required: true
  fileParam:
    type: number
    description: File number
    name: file
    in: path
    required: true
  fileReferenceParam:
    type: string
    description: Identifier of the file location
    name: file
    in: query
    required: true
  fieldsParam:
    type: string
    default: "*"
    description: A comma separated list of fields which should be in the result
    name: fields
    in: query
  searchParam:
    type: string
    description: search criterium
    name: search
    in: query
  startParam:
    type: number
    default: 0
    description: Start offset where the read will start from
    name: start
    in: query
  limitParam:
    type: number
    default: 20
    description: Maximal number of records retrieved
    name: limit
    in: query
  sortParam:
    type: string
    description: sort criterium
    name: sorted_by
    in: query
  compactParam:
    type: boolean
    description: return result in compact structure
    name: compact
    in: query
  flattenParam:
    type: boolean
    description: remove database group tree entries in result records
    name: flatten
    in: query
  descriptorParam:
    type: boolean
    description: Read a descriptor read with the given field entry
    name: descriptor
    in: query
  exchangeParam:
    type: boolean
    description: Exchange current imput data with record
    name: exchange
    in: query
  locationParam:
    type: string
    description: Identifier of the file location
    name: location
    in: path
    required: true
  rfc3339Param:
    type: boolean
    description: Return time format in RFC3339
    name: rfc3339
    in: query
securityDefinitions:
  BasicAuth:
    # This scheme uses the header: "Authorization: Basic {base64 encoded string defined by username:password}"
    # Scopes are not supported with this type of authorization.
    description: HTTP Basic Authentication. Works over `HTTP` and `HTTPS`
    type: basic
  isReseller:
    # This scheme uses the header: "X-Custom-Key: {base64 encoded string}"
    # Scopes are not supported with this type of authorization.
    type: apiKey
    in: header
    name: X-Custom-Key
  # isResellerQuery:
  #   # This scheme uses the query parameter "CustomKeyAsQuery"
  #   # Scopes are not supported with this type of authorization.
  #   type: apiKey
  #   in: query
  #   name: CustomKeyAsQuery
  hasRole:
    # This scheme uses the header: "Authorization: Bearer {base64 encoded string representing a JWT}"
    # Alternatively, the query param: "access_token" may be used.
    #
    # In our scenario, we must use the query param version in order to avoid
    # passing several headers with key 'Authorization'
    type: oauth2
    # The flow and URLs in spec are for documentary purpose: go-swagger does not implement OAuth workflows
    flow: accessCode
    authorizationUrl: "https://dummy.oauth.net/auth"
    tokenUrl: "https://dumy.oauth.net/token"
    # Required scopes are passed by the runtime to the authorizer
    scopes:
      admin: scope of registered administrators
      user: scope of data access users
tags:
  - description: Adabas Administration information
    name: Environment
  - description: Handling the user in the RESTful server
    name: Users
  - description: Adabas Online usage only
    name: Online
  - description: Adabas offline usage only
    name: Offline
  - description: Adabas Online and offline usage possible
    name: OnlineOffline
  - description: Scheduler managing jobs running in the RESTful server
    name: Scheduler
